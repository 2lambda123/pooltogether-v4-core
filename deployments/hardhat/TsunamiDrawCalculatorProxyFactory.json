{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract TsunamiDrawCalculatorHarness",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deployMinimal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instance",
      "outputs": [
        {
          "internalType": "contract TsunamiDrawCalculatorHarness",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb869cff53f133116b2f28829412c2064d3bf94b0214fe89042bc3130318b841f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1617263",
    "logsBloom": "0x
    "blockHash": "0xf2bf70ed9437bc1f3367949b2e4992b6589628032be35039b4a6f86dc64afaa5",
    "transactionHash": "0xb869cff53f133116b2f28829412c2064d3bf94b0214fe89042bc3130318b841f",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1617263",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b3f16b26ce5bbb86e7ef5bf9dd11ea21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract TsunamiDrawCalculatorHarness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instance\",\"outputs\":[{\"internalType\":\"contract TsunamiDrawCalculatorHarness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Creates a minimal proxy to the TsunamiDrawCalculatorHarness.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TsunamiDrawCalculatorHarnessProxyFactory.sol\":\"TsunamiDrawCalculatorHarnessProxyFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"contracts/TsunamiDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\nimport \\\"./interfaces/ITicketTwab.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n///@title TsunamiDrawCalculator is an ownable implmentation of an IDrawCalculator\\ncontract TsunamiDrawCalculator is IDrawCalculator, OwnableUpgradeable {\\n  ITicketTwab ticket;\\n\\n  ///@notice Draw settings struct\\n  ///@param bitRangeValue Decimal representation of bitRangeSize\\n  ///@param bitRangeSize Number of bits to consider matching\\n  ///@param matchCardinality The bitRangeSize's to consider in the 256 random numbers. Must be > 1 and < 256/bitRangeSize\\n  ///@param pickCost Amount of ticket balance required per pick\\n  ///@param distributions Array of prize distribution percentages, expressed in fraction form with base 1e18. Max sum of these <= 1 Ether.\\n  struct DrawSettings {\\n    uint8 bitRangeValue;\\n    uint8 bitRangeSize;\\n    uint16 matchCardinality;\\n    uint224 pickCost;\\n    uint256[] distributions; // in order: index0: grandPrize, index1: runnerUp, etc.\\n  }\\n  ///@notice storage of the DrawSettings associated with this Draw Calculator. NOTE: mapping? store elsewhere?\\n  DrawSettings public drawSettings;\\n\\n  ///@notice Emitted when the DrawParams are set/updated\\n  event DrawSettingsSet(DrawSettings _drawSettings);\\n\\n  ///@notice Emitted when the contract is initialized\\n  event Initialized(ITicketTwab indexed _ticket);\\n\\n  ///@notice Initializer sets the initial parameters\\n  ///@param _ticket Ticket associated with this DrawCalculator\\n  ///@param _drawSettings Initial DrawSettings\\n  function initialize(ITicketTwab _ticket, DrawSettings calldata _drawSettings) public initializer {\\n    __Ownable_init();\\n    ticket = _ticket;\\n\\n    _setDrawSettings(_drawSettings);\\n    emit Initialized(_ticket);\\n  }\\n\\n  ///@notice Calulates the prize amount for a user at particular draws. Called by a Claimable Strategy.\\n  ///@param user User for which to calcualte prize amount\\n  ///@param winningRandomNumbers the winning random numbers for the Draws\\n  ///@param timestamps the timestamps at which the Draws occurred\\n  ///@param prizes The prizes at those Draws\\n  ///@param data The encoded pick indices\\n  ///@return The amount of prize to award to the user\\n  function calculate(address user, uint256[] calldata winningRandomNumbers, uint32[] calldata timestamps, uint256[] calldata prizes, bytes calldata data)\\n    external override view returns (uint256){\\n\\n    require(winningRandomNumbers.length == timestamps.length && timestamps.length == prizes.length, \\\"DrawCalc/invalid-calculate-input-lengths\\\");\\n\\n    uint256[][] memory pickIndices = abi.decode(data, (uint256 [][]));\\n    require(pickIndices.length == timestamps.length, \\\"DrawCalc/invalid-pick-indices-length\\\");\\n\\n    uint256[] memory userBalances = ticket.getBalances(user, timestamps); // CALL\\n    bytes32 userRandomNumber = keccak256(abi.encodePacked(user)); // hash the users address\\n\\n    DrawSettings memory settings = drawSettings; //sload\\n\\n    uint256 prize = 0;\\n\\n    for (uint256 index = 0; index < winningRandomNumbers.length; index++) {\\n      prize += _calculate(winningRandomNumbers[index], prizes[index], userBalances[index], userRandomNumber, pickIndices[index], settings);\\n    }\\n    return prize;\\n  }\\n\\n  ///@notice calculates the prize amount per Draw per users pick\\n  ///@param winningRandomNumber The Draw's winningRandomNumber\\n  ///@param prize The Draw's prize amount\\n  ///@param balance The users's balance for that Draw\\n  ///@param userRandomNumber the users randomNumber for that draw\\n  ///@param picks The users picks for that draw\\n  ///@param _drawSettings Params with the associated draw\\n  ///@return prize (if any) per Draw claim\\n  function _calculate(uint256 winningRandomNumber, uint256 prize, uint256 balance, bytes32 userRandomNumber, uint256[] memory picks, DrawSettings memory _drawSettings)\\n    internal view returns (uint256)\\n  {\\n    uint256 totalUserPicks = balance / _drawSettings.pickCost;\\n    uint256 pickPayoutFraction = 0;\\n\\n    for(uint256 index  = 0; index < picks.length; index++){\\n      uint256 randomNumberThisPick = uint256(keccak256(abi.encode(userRandomNumber, picks[index])));\\n      require(picks[index] < totalUserPicks, \\\"DrawCalc/insufficient-user-picks\\\");\\n      pickPayoutFraction += calculatePickFraction(randomNumberThisPick, winningRandomNumber, _drawSettings);\\n    }\\n    return (pickPayoutFraction * prize) / 1 ether;\\n  }\\n\\n  ///@notice Calculates the fraction of the Draw's Prize awardable to that user\\n  ///@param randomNumberThisPick users random number for this Pick\\n  ///@param winningRandomNumber The winning number for this draw\\n  ///@param _drawSettings The parameters associated with the draw\\n  ///@return percentage of the Draw's Prize awardable to that user\\n  function calculatePickFraction(uint256 randomNumberThisPick, uint256 winningRandomNumber, DrawSettings memory _drawSettings)\\n    internal view returns(uint256) {\\n\\n    uint256 prizeFraction = 0;\\n    uint256 numberOfMatches = 0;\\n\\n    uint256 _matchCardinality = _drawSettings.matchCardinality; // how many bitRangeSize to consider within the 256 bits. Max 256.\\n    uint8 _bitRangeSize = _drawSettings.bitRangeSize; // how many bits we attempt to match - must satisfy 1 <= bitRangeSize <= _matchCardinality\\n    uint8 _bitRangeMaskValue = _drawSettings.bitRangeValue;  //decimal representation of _bitRangeSize must be equal to (2 ^ _bitRangeSize) - 1 //for gas efficiency only.\\n\\n    for(uint256 matchIndex = 0; matchIndex < _matchCardinality; matchIndex++){\\n      uint16 _matchIndexOffset = uint16(matchIndex * _bitRangeSize);\\n\\n      if(_findBitMatchesAtIndex(randomNumberThisPick, winningRandomNumber, _matchIndexOffset, _bitRangeMaskValue)){\\n          numberOfMatches++;\\n        }\\n    }\\n\\n    uint256 prizeDistributionIndex = _matchCardinality - numberOfMatches; // prizeDistributionIndex == 0 : top prize, ==1 : runner-up prize etc\\n\\n    // if prizeDistibution > distribution lenght -> there is no prize at that index\\n    if(prizeDistributionIndex < _drawSettings.distributions.length){ // they are going to receive prize funds\\n      uint256 numberOfPrizesForIndex = uint256(_bitRangeSize) ** prizeDistributionIndex;\\n      uint256 prizePercentageAtIndex = _drawSettings.distributions[prizeDistributionIndex];\\n      prizeFraction = prizePercentageAtIndex / numberOfPrizesForIndex;\\n    }\\n    return prizeFraction;\\n  }\\n\\n  ///@notice helper function to return if the bits in a word match at a particular index\\n  ///@param word1 word1 to index and match\\n  ///@param word2 word2 to index and match\\n  ///@param indexOffset 0 start index including 4-bit offset (i.e. 8 observes index 2 = 4 * 2)\\n  ///@param _bitRangeMaskValue _bitRangeMaskValue must be equal to (_bitRangeSize ^ 2) - 1\\n  ///@return true if there is a match, false otherwise\\n  function _findBitMatchesAtIndex(uint256 word1, uint256 word2, uint256 indexOffset, uint8 _bitRangeMaskValue)\\n    internal pure returns(bool) {\\n    // generate a mask of _bitRange length at the specified offset\\n    uint256 mask = (uint256(_bitRangeMaskValue)) << indexOffset;\\n\\n    // find bits at index for word1\\n    uint256 bits1 = (uint256(word1) & mask);\\n\\n    // find bits at index for word2\\n    uint256 bits2 = (uint256(word2) & mask);\\n\\n    return bits1 == bits2;\\n  }\\n\\n  ///@notice Set the DrawCalculators DrawSettings\\n  ///@dev Distributions must be expressed with Ether decimals (1e18)\\n  ///@param _drawSettings DrawSettings struct to set\\n  function setDrawSettings(DrawSettings calldata _drawSettings) external onlyOwner {\\n    _setDrawSettings(_drawSettings);\\n  }\\n\\n  ///@notice Set the DrawCalculators DrawSettings\\n  ///@dev Distributions must be expressed with Ether decimals (1e18)\\n  ///@param _drawSettings DrawSettings struct to set\\n  function _setDrawSettings(DrawSettings calldata _drawSettings) internal {\\n    uint256 sumTotalDistributions = 0;\\n    uint256 distributionsLength = _drawSettings.distributions.length;\\n\\n    require(_drawSettings.matchCardinality >= distributionsLength, \\\"DrawCalc/matchCardinality-gt-distributions\\\");\\n    require(_drawSettings.bitRangeValue == (2 ** _drawSettings.bitRangeSize) - 1, \\\"DrawCalc/bitRangeValue-incorrect\\\");\\n    require(_drawSettings.bitRangeSize <= 256 / _drawSettings.matchCardinality, \\\"DrawCalc/bitRangeSize-too-large\\\");\\n    require(_drawSettings.pickCost > 0, \\\"DrawCalc/pick-gt-0\\\");\\n\\n    for(uint256 index = 0; index < distributionsLength; index++){\\n      sumTotalDistributions += _drawSettings.distributions[index];\\n    }\\n\\n    require(sumTotalDistributions <= 1 ether, \\\"DrawCalc/distributions-gt-100%\\\");\\n    drawSettings = _drawSettings; //sstore\\n    emit DrawSettingsSet(_drawSettings);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x88150a3c539fab2939a1c3152f4891ab14f7d15b0b1c2e55d1ca958facd2301d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x15fd8b3462494eeb25ec3351cc29fd5594d16df6c01d12b90493dd9bb82b7423\"},\"contracts/interfaces/IDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IDrawCalculator {\\n  function calculate(address user, uint256[] calldata randomNumbers, uint32[] calldata timestamps, uint256[] calldata prizes, bytes calldata data) external returns (uint256);\\n  \\n}\",\"keccak256\":\"0x6bae8e4f6cd12a3828364babb481a5ff51e287ff23bca2190199c59bcc0ee09b\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketTwab.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\ninterface ITicketTwab {\\n  function getBalance(address user, uint32 timestamp) external view returns(uint256);\\n  function getBalances(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe640b295312a2b0c498e9597c2f9150ef626af68d4ceebfd94f1a5cd33548b56\",\"license\":\"MIT\"},\"contracts/test/TsunamiDrawCalculatorHarness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../TsunamiDrawCalculator.sol\\\";\\n\\ncontract TsunamiDrawCalculatorHarness is TsunamiDrawCalculator {\\n  \\n  function findBitMatchesAtIndex(uint256 word1, uint256 word2, uint256 index, uint8 _bitRangeSize, uint8 _maskValue) external returns(bool) {\\n    require(_maskValue == (2 ** _bitRangeSize) - 1);\\n    return _findBitMatchesAtIndex(word1, word2, (index * _bitRangeSize), _maskValue);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xdbf4c6aa4fe62c7e9251c10c4f8343a033aa2f378ab7cc3da9e5f4503e7ad6d6\",\"license\":\"MIT\"},\"contracts/test/TsunamiDrawCalculatorHarnessProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./TsunamiDrawCalculatorHarness.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Creates a minimal proxy to the TsunamiDrawCalculatorHarness.\\ncontract TsunamiDrawCalculatorHarnessProxyFactory is ProxyFactory {\\n\\n  TsunamiDrawCalculatorHarness public instance;\\n\\n  constructor () {\\n    instance = new TsunamiDrawCalculatorHarness();\\n  }\\n\\n  function create() external returns (TsunamiDrawCalculatorHarness) {\\n    return TsunamiDrawCalculatorHarness(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n\\n}\",\"keccak256\":\"0x090e62df2f75dc119525d1a1d0d5954992d7044d1098742519e3643715129192\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b611805806103e283390190565b6103678061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a5b1dcba231ef9f688e015008150b3690514edcaa51c58968c29535f8e25576364736f6c63430008060033608060405234801561001057600080fd5b506117e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806374fa42011161005b57806374fa4201146100f35780638da5cb5b14610106578063a035eef214610121578063f2fde38b1461018d57600080fd5b80630b864dcf1461008d57806323bed30d146100a257806358fe1abe146100ca578063715018a6146100eb575b600080fd5b6100a061009b3660046110ca565b6101a0565b005b6100b56100b0366004611141565b6101df565b60405190151581526020015b60405180910390f35b6100dd6100d8366004610dc8565b610231565b6040519081526020016100c1565b6100a0610519565b6100a061010136600461107a565b61054f565b6033546040516001600160a01b0390911681526020016100c1565b6066546101569060ff8082169161010081049091169062010000810461ffff169064010000000090046001600160e01b031684565b6040805160ff958616815294909316602085015261ffff909116918301919091526001600160e01b031660608201526080016100c1565b6100a061019b366004610da4565b61061d565b6033546001600160a01b031633146101d35760405162461bcd60e51b81526004016101ca9061129d565b60405180910390fd5b6101dc816106b5565b50565b600060016101ee8460026114da565b6101f891906115a7565b8260ff161461020657600080fd5b610227868661021860ff871688611588565b8560ff16901b91821691161490565b9695505050505050565b6000878614801561024157508584145b61029e5760405162461bcd60e51b815260206004820152602860248201527f4472617743616c632f696e76616c69642d63616c63756c6174652d696e7075746044820152672d6c656e6774687360c01b60648201526084016101ca565b60006102ac83850185610ecb565b8051909150871461030b5760405162461bcd60e51b8152602060048201526024808201527f4472617743616c632f696e76616c69642d7069636b2d696e64696365732d6c656044820152630dccee8d60e31b60648201526084016101ca565b606554604051634d0ab5eb60e11b81526000916001600160a01b031690639a156bd690610340908f908d908d906004016111ea565b60006040518083038186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103949190810190610fe2565b6040516bffffffffffffffffffffffff1960608f901b16602082015290915060009060340160408051808303601f19018152828252805160209182012060a0840183526066805460ff80821687526101008204168487015262010000810461ffff168686015264010000000090046001600160e01b031660608601526067805485518186028101860190965280865292965060009594919360808601939083018282801561046157602002820191906000526020600020905b81548152602001906001019080831161044d575b50505050508152505090506000805b8d811015610506576104e88f8f8381811061048d5761048d611688565b905060200201358c8c848181106104a6576104a6611688565b905060200201358784815181106104bf576104bf611688565b6020026020010151878a86815181106104da576104da611688565b602002602001015188610994565b6104f2908361143e565b9150806104fe81611641565b915050610470565b509e9d5050505050505050505050505050565b6033546001600160a01b031633146105435760405162461bcd60e51b81526004016101ca9061129d565b61054d6000610acf565b565b600054610100900460ff1680610568575060005460ff16155b6105845760405162461bcd60e51b81526004016101ca9061124f565b600054610100900460ff161580156105a6576000805461ffff19166101011790555b6105ae610b21565b606580546001600160a01b0319166001600160a01b0385161790556105d2826106b5565b6040516001600160a01b038416907f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e690600090a28015610618576000805461ff00191690555b505050565b6033546001600160a01b031633146106475760405162461bcd60e51b81526004016101ca9061129d565b6001600160a01b0381166106ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ca565b6101dc81610acf565b6000806106c5608084018461139f565b91508190506106da6060850160408601611107565b61ffff16101561073f5760405162461bcd60e51b815260206004820152602a60248201527f4472617743616c632f6d6174636843617264696e616c6974792d67742d646973604482015269747269627574696f6e7360b01b60648201526084016101ca565b60016107516040850160208601611197565b61075c9060026114da565b61076691906115a7565b6107736020850185611197565b60ff16146107c35760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f62697452616e676556616c75652d696e636f727265637460448201526064016101ca565b6107d36060840160408501611107565b6107df90610100611456565b61ffff166107f36040850160208601611197565b60ff1611156108445760405162461bcd60e51b815260206004820152601f60248201527f4472617743616c632f62697452616e676553697a652d746f6f2d6c617267650060448201526064016101ca565b60006108566080850160608601611124565b6001600160e01b0316116108a15760405162461bcd60e51b815260206004820152601260248201527104472617743616c632f7069636b2d67742d360741b60448201526064016101ca565b60005b818110156108ef576108b9608085018561139f565b828181106108c9576108c9611688565b90506020020135836108db919061143e565b9250806108e781611641565b9150506108a4565b50670de0b6b3a76400008211156109485760405162461bcd60e51b815260206004820152601e60248201527f4472617743616c632f646973747269627574696f6e732d67742d31303025000060448201526064016101ca565b82606661095582826116b4565b9050507fa567b2768d3df35dbf92127c9f445483191b6bc95cd0039e3cea0092462e464e8360405161098791906112d2565b60405180910390a1505050565b60008082606001516001600160e01b0316866109b09190611477565b90506000805b8551811015610aa4576000878783815181106109d4576109d4611688565b60200260200101516040516020016109f6929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c905083878381518110610a2457610a24611688565b602002602001015110610a795760405162461bcd60e51b815260206004820181905260248201527f4472617743616c632f696e73756666696369656e742d757365722d7069636b7360448201526064016101ca565b610a84818c88610b9c565b610a8e908461143e565b9250508080610a9c90611641565b9150506109b6565b50670de0b6b3a7640000610ab88983611588565b610ac29190611477565b9998505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610b3a575060005460ff16155b610b565760405162461bcd60e51b81526004016101ca9061124f565b600054610100900460ff16158015610b78576000805461ffff19166101011790555b610b80610c76565b610b88610ce0565b80156101dc576000805461ff001916905550565b6040810151602082015182516000928392839261ffff90921691835b83811015610c08576000610bcf60ff851683611588565b905060ff831661ffff82161b808b16908c161415610bf55785610bf181611641565b9650505b5080610c0081611641565b915050610bb8565b506000610c1585856115a7565b9050876080015151811015610c68576000610c338260ff86166114ce565b9050600089608001518381518110610c4d57610c4d611688565b602002602001015190508181610c639190611477565b975050505b509398975050505050505050565b600054610100900460ff1680610c8f575060005460ff16155b610cab5760405162461bcd60e51b81526004016101ca9061124f565b600054610100900460ff16158015610b88576000805461ffff191661010117905580156101dc576000805461ff001916905550565b600054610100900460ff1680610cf9575060005460ff16155b610d155760405162461bcd60e51b81526004016101ca9061124f565b600054610100900460ff16158015610d37576000805461ffff19166101011790555b610b8833610acf565b60008083601f840112610d5257600080fd5b50813567ffffffffffffffff811115610d6a57600080fd5b6020830191508360208260051b8501011115610d8557600080fd5b9250929050565b600060a08284031215610d9e57600080fd5b50919050565b600060208284031215610db657600080fd5b8135610dc181611766565b9392505050565b600080600080600080600080600060a08a8c031215610de657600080fd5b8935610df181611766565b985060208a013567ffffffffffffffff80821115610e0e57600080fd5b610e1a8d838e01610d40565b909a50985060408c0135915080821115610e3357600080fd5b610e3f8d838e01610d40565b909850965060608c0135915080821115610e5857600080fd5b610e648d838e01610d40565b909650945060808c0135915080821115610e7d57600080fd5b818c0191508c601f830112610e9157600080fd5b813581811115610ea057600080fd5b8d6020828501011115610eb257600080fd5b6020830194508093505050509295985092959850929598565b60006020808385031215610ede57600080fd5b823567ffffffffffffffff80821115610ef657600080fd5b818501915085601f830112610f0a57600080fd5b8135610f1d610f188261141a565b6113e9565b80828252858201915085850189878560051b8801011115610f3d57600080fd5b60005b84811015610fd357813586811115610f5757600080fd5b8701603f81018c13610f6857600080fd5b88810135610f78610f188261141a565b808282528b82019150604084018f60408560051b8701011115610f9a57600080fd5b600094505b83851015610fbd578035835260019490940193918c01918c01610f9f565b5087525050509287019290870190600101610f40565b50909998505050505050505050565b60006020808385031215610ff557600080fd5b825167ffffffffffffffff81111561100c57600080fd5b8301601f8101851361101d57600080fd5b805161102b610f188261141a565b80828252848201915084840188868560051b870101111561104b57600080fd5b600094505b8385101561106e578051835260019490940193918501918501611050565b50979650505050505050565b6000806040838503121561108d57600080fd5b823561109881611766565b9150602083013567ffffffffffffffff8111156110b457600080fd5b6110c085828601610d8c565b9150509250929050565b6000602082840312156110dc57600080fd5b813567ffffffffffffffff8111156110f357600080fd5b6110ff84828501610d8c565b949350505050565b60006020828403121561111957600080fd5b8135610dc18161177b565b60006020828403121561113657600080fd5b8135610dc18161178b565b600080600080600060a0868803121561115957600080fd5b8535945060208601359350604086013592506060860135611179816117a0565b91506080860135611189816117a0565b809150509295509295909350565b6000602082840312156111a957600080fd5b8135610dc1816117a0565b81835260006001600160fb1b038311156111cd57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b03841681526040602080830182905290820183905260009084906060840183805b8781101561124157843563ffffffff811680821461122e578384fd5b8452509383019391830191600101611212565b509098975050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152600082356112e3816117a0565b60ff811660208401525060208301356112fb816117a0565b60ff811660408401525060408301356113138161177b565b61ffff8116606084015250606083013561132c8161178b565b6001600160e01b031660808381019190915283013536849003601e1901811261135457600080fd5b8301803567ffffffffffffffff81111561136d57600080fd5b8060051b360385131561137f57600080fd5b60a08085015261139660c0850182602085016111b4565b95945050505050565b6000808335601e198436030181126113b657600080fd5b83018035915067ffffffffffffffff8211156113d157600080fd5b6020019150600581901b3603821315610d8557600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114125761141261169e565b604052919050565b600067ffffffffffffffff8211156114345761143461169e565b5060051b60200190565b600082198211156114515761145161165c565b500190565b600061ffff8084168061146b5761146b611672565b92169190910492915050565b60008261148657611486611672565b500490565b600181815b808511156114c65781600019048211156114ac576114ac61165c565b808516156114b957918102915b93841c9390800290611490565b509250929050565b6000610dc183836114e5565b6000610dc160ff8416835b6000826114f457506001611582565b8161150157506000611582565b816001811461151757600281146115215761153d565b6001915050611582565b60ff8411156115325761153261165c565b50506001821b611582565b5060208310610133831016604e8410600b8410161715611560575081810a611582565b61156a838361148b565b806000190482111561157e5761157e61165c565b0290505b92915050565b60008160001904831182151516156115a2576115a261165c565b500290565b6000828210156115b9576115b961165c565b500390565b680100000000000000008311156115d7576115d761169e565b80548382558084101561160e576000828152602081208581019083015b8082101561160a578282556001820191506115f4565b5050505b5060008181526020812083915b8581101561163957823582556020909201916001918201910161161b565b505050505050565b60006000198214156116555761165561165c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81356116bf816117a0565b60ff8116905081548160ff19821617835560208401356116de816117a0565b61ff008160081b169050808361ffff1984161717845560408501356117028161177b565b63ffff00008160101b168463ffffffff19851617831717855550505050606082013561172d8161178b565b815463ffffffff16602082901b63ffffffff191617825550611752608083018361139f565b6117608183600186016115be565b50505050565b6001600160a01b03811681146101dc57600080fd5b61ffff811681146101dc57600080fd5b6001600160e01b03811681146101dc57600080fd5b60ff811681146101dc57600080fdfea2646970667358221220fd59a68db50b362811c19beb04fac4f42cfde73ae7b473aade7183ff333ec59f64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a5b1dcba231ef9f688e015008150b3690514edcaa51c58968c29535f8e25576364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Creates a minimal proxy to the TsunamiDrawCalculatorHarness.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16678,
        "contract": "contracts/test/TsunamiDrawCalculatorHarnessProxyFactory.sol:TsunamiDrawCalculatorHarnessProxyFactory",
        "label": "instance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TsunamiDrawCalculatorHarness)16668"
      }
    ],
    "types": {
      "t_contract(TsunamiDrawCalculatorHarness)16668": {
        "encoding": "inplace",
        "label": "contract TsunamiDrawCalculatorHarness",
        "numberOfBytes": "20"
      }
    }
  }
}