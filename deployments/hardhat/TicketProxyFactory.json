{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract Ticket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deployMinimal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instance",
      "outputs": [
        {
          "internalType": "contract Ticket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8690bf2d62d0a1873fd02c00ebbd3aa42048e760e04942b7eaa246972e6ec049",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3043918",
    "logsBloom": "0x
    "blockHash": "0x1d215f394da0663fb873dc23f19735f24501fd55d9662bc3d9b74be6199152a8",
    "transactionHash": "0x8690bf2d62d0a1873fd02c00ebbd3aa42048e760e04942b7eaa246972e6ec049",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "3043918",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b3f16b26ce5bbb86e7ef5bf9dd11ea21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract Ticket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instance\",\"outputs\":[{\"internalType\":\"contract Ticket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create()\":{\"returns\":{\"_0\":\"A reference to the new proxied Controlled ERC20 Token\"}}},\"title\":\"Controlled ERC20 Token Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the Factory with an instance of the Controlled ERC20 Token\"},\"create()\":{\"notice\":\"Creates a new Controlled ERC20 Token as a proxy of the template instance\"},\"instance()\":{\"notice\":\"Contract template for deploying proxied tokens\"}},\"notice\":\"Minimal proxy pattern for creating new Controlled ERC20 Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicketProxyFactory.sol\":\"TicketProxyFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x8570116be0ba91a0e4e48508d8b74afb67baa9446c4cc08e2c54510be07835ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdddbd304b5a96782965d6c04ea9889734be0691a68fcff10908f48ce330cac7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"contracts/Ticket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"./import/token/ControlledToken.sol\\\";\\nimport \\\"./TicketTwab.sol\\\";\\n\\n/// @title Ticket contract inerhiting from ERC20 and updated to keep track of users balance.\\n/// @author PoolTogether Inc.\\ncontract Ticket is ControlledToken, TicketTwab, OwnableUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using OverflowSafeComparator for uint32;\\n  using SafeCastUpgradeable for uint256;\\n\\n  /// @notice Tracks total supply of tickets.\\n  uint256 private _totalSupply;\\n\\n  /// @notice Emitted when ticket is initialized.\\n  /// @param name Ticket name (eg: PoolTogether Dai Ticket (Compound)).\\n  /// @param symbol Ticket symbol (eg: PcDAI).\\n  /// @param decimals Ticket decimals.\\n  /// @param controller Token controller address.\\n  event TicketInitialized(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    TokenControllerInterface controller\\n  );\\n\\n  /// @notice ERC20 ticket token decimals.\\n  uint8 private _decimals;\\n\\n  /// @notice Initializes Ticket with passed parameters.\\n  /// @param _name ERC20 ticket token name.\\n  /// @param _symbol ERC20 ticket token symbol.\\n  /// @param decimals_ ERC20 ticket token decimals.\\n  function initialize (\\n    string calldata _name,\\n    string calldata _symbol,\\n    uint8 decimals_,\\n    TokenControllerInterface _controller\\n  ) public virtual override initializer {\\n    __ERC20_init(_name, _symbol);\\n    __ERC20Permit_init(\\\"PoolTogether Ticket\\\");\\n\\n    require(decimals_ > 0, \\\"Ticket/decimals-gt-zero\\\");\\n    _decimals = decimals_;\\n\\n    __Ownable_init();\\n\\n    require(address(_controller) != address(0), \\\"Ticket/controller-not-zero-address\\\");\\n    ControlledToken.initialize(_name, _symbol, _decimals, _controller);\\n\\n    emit TicketInitialized(_name, _symbol, decimals_, _controller);\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token decimals.\\n  /// @dev This value should be equal to the decimals of the token used to deposit into the pool.\\n  /// @return uint8 decimals.\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint240 `_user` ticket token balance.\\n  function balanceOf(address _user) public view override returns (uint256) {\\n    return _balanceOf(_user);\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token total supply.\\n  /// @return uint256 Total supply of the ERC20 ticket token.\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _ticketTotalSupply();\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param _from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param _to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param _amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual override {\\n    super._beforeTokenTransfer(_from, _to, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_transfer` function of the base ERC20Upgradeable contract.\\n  /// @dev `_sender` cannot be the zero address.\\n  /// @dev `_recipient` cannot be the zero address.\\n  /// @dev `_sender` must have a balance of at least `_amount`.\\n  /// @param _sender Address of the `_sender`that will send `_amount` of tokens.\\n  /// @param _recipient Address of the `_recipient`that will receive `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be transferred from `_sender` to `_recipient`.\\n  function _transfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) internal override virtual {\\n    require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    uint240 amount = uint240(_amount);\\n\\n    _beforeTokenTransfer(_sender, _recipient, _amount);\\n\\n    AmountWithTwabIndex memory sender = _usersBalanceWithTwabIndex[_sender];\\n    require(sender.amount >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _usersBalanceWithTwabIndex[_sender] = AmountWithTwabIndex({\\n          amount: sender.amount - amount,\\n          nextTwabIndex: _newUserTwab(_sender, sender.nextTwabIndex)\\n        });\\n    }\\n\\n    AmountWithTwabIndex memory recipient = _usersBalanceWithTwabIndex[_recipient];\\n    _usersBalanceWithTwabIndex[_recipient] = AmountWithTwabIndex({\\n      amount: recipient.amount + amount,\\n      nextTwabIndex: _newUserTwab(_recipient, recipient.nextTwabIndex)\\n    });\\n\\n    emit Transfer(_sender, _recipient, _amount);\\n\\n    _afterTokenTransfer(_sender, _recipient, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_mint` function of the base ERC20Upgradeable contract.\\n  /// @dev `_to` cannot be the zero address.\\n  /// @param _to Address that will be minted `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be minted to `_to`.\\n  function _mint(address _to, uint256 _amount) internal virtual override {\\n    require(_to != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    uint240 amount = uint240(_amount);\\n\\n    _beforeTokenTransfer(address(0), _to, _amount);\\n\\n    AmountWithTwabIndex memory ticketTotalSupply = _totalSupplyWithTwabIndex;\\n    _totalSupplyWithTwabIndex = AmountWithTwabIndex({\\n      amount: ticketTotalSupply.amount + amount,\\n      nextTwabIndex: _newTotalSupplyTwab(ticketTotalSupply.nextTwabIndex)\\n    });\\n\\n    AmountWithTwabIndex memory user = _usersBalanceWithTwabIndex[_to];\\n    _usersBalanceWithTwabIndex[_to] = AmountWithTwabIndex({\\n      amount: user.amount + amount,\\n      nextTwabIndex: _newUserTwab(_to, user.nextTwabIndex)\\n    });\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    _afterTokenTransfer(address(0), _to, _amount);\\n  }\\n\\n  /// @notice Overridding of the `_burn` function of the base ERC20Upgradeable contract.\\n  /// @dev `_from` cannot be the zero address.\\n  /// @dev `_from` must have at least `_amount` of tokens.\\n  /// @param _from Address that will be burned `_amount` of tokens.\\n  /// @param _amount Amount of tokens to be burnt from `_from`.\\n  function _burn(address _from, uint256 _amount) internal virtual override {\\n    require(_from != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    uint240 amount = uint240(_amount);\\n\\n    _beforeTokenTransfer(_from, address(0), _amount);\\n\\n    AmountWithTwabIndex memory user = _usersBalanceWithTwabIndex[_from];\\n    require(user.amount >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      _usersBalanceWithTwabIndex[_from] = AmountWithTwabIndex({\\n        amount: user.amount - amount,\\n        nextTwabIndex: _newUserTwab(_from, user.nextTwabIndex)\\n      });\\n    }\\n\\n    AmountWithTwabIndex memory ticketTotalSupply = _totalSupplyWithTwabIndex;\\n    _totalSupplyWithTwabIndex = AmountWithTwabIndex({\\n      amount: ticketTotalSupply.amount - amount,\\n      nextTwabIndex:  _newTotalSupplyTwab(ticketTotalSupply.nextTwabIndex)\\n    });\\n\\n    emit Transfer(_from, address(0), _amount);\\n\\n    _afterTokenTransfer(_from, address(0), _amount);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x9236db9ae2b6fae27f62f9f945915becdefcce246a1389a23194b9dc8370d482\",\"license\":\"GPL-3.0\"},\"contracts/TicketProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Ticket.sol\\\";\\nimport \\\"./external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract TicketProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  Ticket public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () {\\n    instance = new Ticket();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create() external returns (Ticket) {\\n    return Ticket(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\",\"keccak256\":\"0xf2588dfe8a10f343c3a95fb3b358684bcad76b59b2a6e96b0eb273e57c107331\",\"license\":\"GPL-3.0\"},\"contracts/TicketTwab.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ITicketTwab.sol\\\";\\nimport \\\"./libraries/OverflowSafeComparator.sol\\\";\\n\\n/// @title Twab contract inerhiting from ERC20 and updated to keep track of users balance.\\n/// @author PoolTogether Inc.\\ncontract TicketTwab is ITicketTwab {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using OverflowSafeComparator for uint32;\\n  using SafeCastUpgradeable for uint256;\\n\\n  /// @notice Time Weighted Average Balance (TWAB).\\n  /// @param amount `amount` at `timestamp`.\\n  /// @param timestamp Recorded `timestamp`.\\n  struct Twab {\\n    uint224 amount;\\n    uint32 timestamp;\\n  }\\n\\n  /// @notice Emitted when a new TWAB has been recorded.\\n  /// @param user Ticket holder address.\\n  /// @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\\n  event NewUserTwab(\\n    address indexed user,\\n    Twab newTwab\\n  );\\n\\n  /// @notice TWAB cardinality used to set the size of any twab circular buffer.\\n  uint32 public constant CARDINALITY = 32;\\n\\n  /// @notice Record of token holders TWABs for each account.\\n  mapping (address => Twab[CARDINALITY]) public usersTwabs;\\n\\n  /// @notice Amount packed with most recent TWAB index.\\n  /// @param amount Current `amount`.\\n  /// @param nextTwabIndex Next TWAB index of twab circular buffer.\\n  struct AmountWithTwabIndex {\\n    uint240 amount;\\n    uint16 nextTwabIndex;\\n  }\\n\\n  /// @notice Record of token holders balance and most recent TWAB index.\\n  mapping(address => AmountWithTwabIndex) internal _usersBalanceWithTwabIndex;\\n\\n  /// @notice Emitted when a new total supply TWAB has been recorded.\\n  /// @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\\n  event NewTotalSupplyTwab(\\n    Twab newTotalSupplyTwab\\n  );\\n\\n  /// @notice Record of tickets total supply TWABs.\\n  Twab[CARDINALITY] public totalSupplyTwabs;\\n\\n  /// @notice Record of tickets total supply and most recent TWAB index.\\n  AmountWithTwabIndex internal _totalSupplyWithTwabIndex;\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _user Address of the user whose TWAB is being fetched.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getBalance(address _user, uint32 _target) override external view returns (uint256) {\\n    return _getBalance(_user, _target);\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balances.\\n  /// @param _user Address of the user whose TWABs are being fetched.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] `_user` TWAB balances.\\n  function getBalances(address _user, uint32[] calldata _targets) external view override returns (uint256[] memory){\\n    uint256 length = _targets.length;\\n    uint256[] memory balances = new uint256[](length);\\n\\n    for(uint256 i = 0; i < length; i++){\\n      balances[i] = _getBalance(_user, _targets[i]);\\n    }\\n\\n    return balances;\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupply`.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function getTotalSupply(uint32 _target) override external view returns (uint256) {\\n    return _getTotalSupply(_target);\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupplies`.\\n  /// @param _targets Timestamps at which the reserved TWABs should be for.\\n  /// @return uint256[] ticket TWAB `totalSupplies`.\\n  function getTotalSupplies(uint32[] calldata _targets) external view override returns (uint256[] memory){\\n    uint256 length = _targets.length;\\n    uint256[] memory totalSupplies = new uint256[](length);\\n\\n    for(uint256 i = 0; i < length; i++){\\n      totalSupplies[i] = _getTotalSupply(_targets[i]);\\n    }\\n\\n    return totalSupplies;\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token balance of a ticket holder.\\n  /// @return uint256 `_user` ticket token balance.\\n  function _balanceOf(address _user) internal view returns (uint256) {\\n    return _usersBalanceWithTwabIndex[_user].amount;\\n  }\\n\\n  /// @notice Returns the ERC20 ticket token total supply.\\n  /// @return uint256 Total supply of the ERC20 ticket token.\\n  function _ticketTotalSupply() internal view returns (uint256) {\\n    return _totalSupplyWithTwabIndex.amount;\\n  }\\n\\n  /// @notice Returns TWAB index.\\n  /// @dev `twabs` is a circular buffer of `CARDINALITY` size equal to 32. So the array goes from 0 to 31.\\n  /// @dev In order to navigate the circular buffer, we need to use the modulo operator.\\n  /// @dev For example, if `_index` is equal to 32, `_index % CARDINALITY` will return 0 and will point to the first element of the array.\\n  /// @param _index Index used to navigate through `twabs` circular buffer.\\n  function _moduloCardinality(uint256 _index) internal pure returns (uint16) {\\n    return uint16(_index % CARDINALITY);\\n  }\\n\\n  /// @notice Returns the `mostRecentTwabIndex` of a `_user`.\\n  /// @param _user Address of the user whose most recent TWAB index is being fetched.\\n  /// @return uint256 `mostRecentTwabIndex` of `_user`.\\n  function _mostRecentTwabIndexOfUser(address _user) internal view returns (uint16) {\\n    return _moduloCardinality(_usersBalanceWithTwabIndex[_user].nextTwabIndex + CARDINALITY - 1);\\n  }\\n\\n  /// @notice Returns the `mostRecentTwabIndex` of `totalSupply`.\\n  /// @return uint256 `mostRecentTwabIndex` of `totalSupply`.\\n  function _mostRecentTwabIndexOfTotalSupply() internal view returns (uint16) {\\n    return _moduloCardinality(_totalSupplyWithTwabIndex.nextTwabIndex + CARDINALITY - 1);\\n  }\\n\\n  /// @notice Records a new TWAB.\\n  /// @param _twabs List of TWABs to update.\\n  /// @param _currentAmount Current `amount`.\\n  /// @param _nextTwabIndex Next TWAB index to record to.\\n  /// @return newTwab New TWAB that was recorded.\\n  /// @return nextAvailableTwabIndex Next available TWAB index after recording.\\n  function _newTwab(\\n    Twab[CARDINALITY] storage _twabs,\\n    uint256 _currentAmount,\\n    uint16 _nextTwabIndex\\n  ) internal returns (Twab memory newTwab, uint16 nextAvailableTwabIndex) {\\n    uint32 currentTimestamp = uint32(block.timestamp);\\n    Twab memory lastTwab = _twabs[_moduloCardinality(_nextTwabIndex + CARDINALITY - 1)];\\n\\n    // If a TWAB already exists at this timestamp, then we don't need to update values\\n    // This is to avoid recording a new TWAB if several transactions happen in the same block\\n    if (lastTwab.timestamp == currentTimestamp) {\\n      return (lastTwab, nextAvailableTwabIndex);\\n    }\\n\\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n    newTwab = Twab({\\n      amount: lastTwab.amount + (_currentAmount * (currentTimestamp - lastTwab.timestamp)).toUint224(),\\n      timestamp: currentTimestamp\\n    });\\n\\n    _twabs[_nextTwabIndex] = newTwab;\\n\\n    nextAvailableTwabIndex = _moduloCardinality(_nextTwabIndex + 1);\\n  }\\n\\n  /// @notice Records a new TWAB for `_user`.\\n  /// @param _user Address of the user whose TWAB is being recorded.\\n  /// @param _nextTwabIndex next TWAB index to record to.\\n  /// @return uint16 next available TWAB index after recording.\\n  function _newUserTwab(address _user, uint16 _nextTwabIndex) internal returns (uint16) {\\n    (Twab memory newTwab, uint16 nextAvailableTwabIndex) = _newTwab(usersTwabs[_user], _balanceOf(_user), _nextTwabIndex);\\n\\n    // We don't record a new TWAB if a TWAB already exists at the same timestamp\\n    // So we don't emit `NewUserTwab` since no new TWAB has been recorded\\n    if (nextAvailableTwabIndex != _nextTwabIndex) {\\n      emit NewUserTwab(_user, newTwab);\\n    }\\n\\n    return nextAvailableTwabIndex;\\n  }\\n\\n  /// @notice Records a new total supply TWAB.\\n  /// @param _nextTwabIndex next TWAB index to record to.\\n  /// @return uint16 next available TWAB index after recording.\\n  function _newTotalSupplyTwab(uint16 _nextTwabIndex) internal returns (uint16) {\\n    (Twab memory newTwab, uint16 nextAvailableTwabIndex) = _newTwab(totalSupplyTwabs, _ticketTotalSupply(), _nextTwabIndex);\\n\\n    // We don't record a new TWAB if a TWAB already exists at the same timestamp\\n    // So we don't emit `NewTotalSupplyTwab` since no new TWAB has been recorded\\n    if (nextAvailableTwabIndex != _nextTwabIndex) {\\n      emit NewTotalSupplyTwab(newTwab);\\n    }\\n\\n    return nextAvailableTwabIndex;\\n  }\\n\\n  /// @notice Fetches TWABs `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n  /// The result may be the same TWAB, or adjacent TWABs.\\n  /// @dev The answer must be contained in the array, used when the target is located within the stored TWAB.\\n  /// boundaries: older than the most recent TWAB and younger, or the same age as, the oldest TWAB.\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _twabIndex Index of the TWAB to start searching from.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @return beforeOrAt TWAB recorded before, or at, the target.\\n  /// @return atOrAfter TWAB recorded at, or after, the target.\\n  function _binarySearch(\\n    Twab[CARDINALITY] memory _twabs,\\n    uint16 _twabIndex,\\n    uint32 _target\\n  ) internal view returns (Twab memory beforeOrAt, Twab memory atOrAfter) {\\n    uint32 time = uint32(block.timestamp);\\n\\n    uint256 leftSide = _moduloCardinality(_twabIndex + 1); // Oldest TWAB\\n    uint256 rightSide = leftSide + CARDINALITY - 1; // Newest TWAB\\n    uint256 currentIndex;\\n\\n    while (true) {\\n      currentIndex = (leftSide + rightSide) / 2;\\n      beforeOrAt = _twabs[_moduloCardinality(currentIndex)];\\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently)\\n      if (beforeOrAtTimestamp == 0) {\\n          leftSide = currentIndex + 1;\\n          continue;\\n      }\\n\\n      atOrAfter = _twabs[_moduloCardinality(currentIndex + 1)];\\n\\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, time);\\n\\n      // Check if we've found the corresponding TWAB\\n      if (targetAtOrAfter && _target.lt(atOrAfter.timestamp, time)) break;\\n\\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower\\n      if (!targetAtOrAfter) rightSide = currentIndex - 1;\\n\\n      // Otherwise, we keep searching higher\\n      else leftSide = currentIndex + 1;\\n    }\\n  }\\n\\n  /// @notice Retrieves TWAB amount at `_target`.\\n  /// @param _twabs List of TWABs to search through.\\n  /// @param _currentAmount Most recent amount recorded.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  /// @param _twabIndex Most recent TWAB index recorded.\\n  /// @return uint256 TWAB amount at `_target`.\\n  function _getAmount(\\n    Twab[CARDINALITY] memory _twabs,\\n    uint32 _target,\\n    uint256 _currentAmount,\\n    uint16 _twabIndex\\n  ) internal view returns (uint256) {\\n    uint32 time = uint32(block.timestamp);\\n    uint32 targetTimestamp = _target > time ? time : _target;\\n\\n    Twab memory afterOrAt;\\n    Twab memory beforeOrAt = _twabs[_twabIndex];\\n\\n    // If `targetTimestamp` is chronologically at or after the newest TWAB, we can early return\\n    if (beforeOrAt.timestamp.lte(targetTimestamp, time)) {\\n      return _currentAmount;\\n    }\\n\\n    // Now, set before to the oldest TWAB\\n    beforeOrAt = _twabs[_moduloCardinality(_twabIndex + 1)];\\n\\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n    if (beforeOrAt.timestamp == 0) beforeOrAt = _twabs[0];\\n\\n    // If `targetTimestamp` is chronologically before the oldest TWAB, we can early return\\n    if (targetTimestamp.lt(beforeOrAt.timestamp, time)) {\\n      return 0;\\n    }\\n\\n    // Otherwise, we perform the `_binarySearch`\\n    (beforeOrAt, afterOrAt) = _binarySearch(_twabs, _twabIndex, _target);\\n\\n    // Difference in amount / time\\n    uint224 differenceInAmount = afterOrAt.amount - beforeOrAt.amount;\\n    uint32 differenceInTime = afterOrAt.timestamp - beforeOrAt.timestamp;\\n\\n    return differenceInAmount / differenceInTime;\\n  }\\n\\n  /// @notice Retrieves `_user` TWAB balance.\\n  /// @param _user Address of the user whose TWAB is being fetched.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function _getBalance(address _user, uint32 _target) internal view returns (uint256) {\\n    return _getAmount(usersTwabs[_user], _target, _balanceOf(_user), _mostRecentTwabIndexOfUser(_user));\\n  }\\n\\n  /// @notice Retrieves ticket TWAB `totalSupply`.\\n  /// @param _target Timestamp at which the reserved TWAB should be for.\\n  function _getTotalSupply(uint32 _target) internal view returns (uint256) {\\n    return _getAmount(totalSupplyTwabs, _target, _ticketTotalSupply(), _mostRecentTwabIndexOfTotalSupply());\\n  }\\n\\n}\\n\",\"keccak256\":\"0x42dc93d39659b104e69dc4d70009f0fe347ccfccd3a7ccbed043f2059708776f\",\"license\":\"GPL-3.0\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x15fd8b3462494eeb25ec3351cc29fd5594d16df6c01d12b90493dd9bb82b7423\"},\"contracts/import/token/ControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\nimport \\\"./ControlledTokenInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ncontract ControlledToken is ERC20PermitUpgradeable, ControlledTokenInterface {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Initialized(\\n    string _name,\\n    string _symbol,\\n    uint8 _decimals,\\n    TokenControllerInterface _controller\\n  );\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  TokenControllerInterface public override controller;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param _decimals The number of decimals for the Token\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    TokenControllerInterface _controller\\n  )\\n    public\\n    virtual\\n    initializer\\n  {\\n    require(address(_controller) != address(0), \\\"ControlledToken/controller-not-zero\\\");\\n    __ERC20_init(_name, _symbol);\\n    __ERC20Permit_init(\\\"PoolTogether ControlledToken\\\");\\n    controller = _controller;\\n    // _setupDecimals(_decimals);\\n\\n    emit Initialized(\\n      _name,\\n      _symbol,\\n      _decimals,\\n      _controller\\n    );\\n  }\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\\n    _mint(_user, _amount);\\n  }\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\\n    if (_operator != _user) {\\n      uint256 decreasedAllowance = allowance(_user, _operator) - _amount;\\n      _approve(_user, _operator, decreasedAllowance);\\n    }\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @dev Function modifier to ensure that the caller is the controller contract\\n  modifier onlyController {\\n    require(_msgSender() == address(controller), \\\"ControlledToken/only-controller\\\");\\n    _;\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    controller.beforeTokenTransfer(from, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x0dc37b53ca77032f073e253d3773f05dbb43f4dca602ff775843a829e546a5ae\",\"license\":\"GPL-3.0\"},\"contracts/import/token/ControlledTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface ControlledTokenInterface is IERC20Upgradeable {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (TokenControllerInterface);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x39ba6ae4828aa2d9aaf36b9dc80c742729756ffc58da1affa8a746c67bddb810\",\"license\":\"GPL-3.0\"},\"contracts/import/token/TokenControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title Controlled ERC20 Token Interface\\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\\ninterface TokenControllerInterface {\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2d3b79397e064eb3b0f3080d2deca2aa2cb09cef1926f77ee62b95dd972dc7e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITicketTwab.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\ninterface ITicketTwab {\\n  function getBalance(address user, uint32 timestamp) external view returns(uint256);\\n  function getBalances(address user, uint32[] calldata timestamp) external view returns(uint256[] memory);\\n  function getTotalSupply(uint32 timestamp) external view returns(uint256);\\n  function getTotalSupplies(uint32[] calldata timestamp) external view returns(uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe640b295312a2b0c498e9597c2f9150ef626af68d4ceebfd94f1a5cd33548b56\",\"license\":\"MIT\"},\"contracts/libraries/OverflowSafeComparator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\n/// @title OverflowSafeComparator library to share comparator functions between contracts\\n/// @author PoolTogether Inc.\\nlibrary OverflowSafeComparator {\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically < `_b`.\\n  function lt(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a < _timestamp && _b < _timestamp) return _a < _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted < bAdjusted;\\n  }\\n\\n  /// @notice 32-bit timestamps comparator.\\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n  /// @param _b Timestamp to compare against `_a`.\\n  /// @param _timestamp A timestamp truncated to 32 bits.\\n  /// @return bool Whether `_a` is chronologically <= `_b`.\\n  function lte(\\n      uint32 _a,\\n      uint32 _b,\\n      uint32 _timestamp\\n  ) internal pure returns (bool) {\\n      // No need to adjust if there hasn't been an overflow\\n      if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n      uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\\n      uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\\n\\n      return aAdjusted <= bAdjusted;\\n  }\\n}\\n\",\"keccak256\":\"0xa4cf3ae170433dffa92588ba1e0b57125a8e4e220caf70ede4804258783e4032\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b6131ca806103e283390190565b6103678061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220abbd91ee612265d8eb6f13d4e5c7ce17d52cacb48aa519e845535f47a3946d8064736f6c63430008060033608060405234801561001057600080fd5b506131aa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a9059cbb116100a2578063dd62ed3e11610071578063dd62ed3e146103fe578063de7ea79d14610437578063f2fde38b1461044a578063f77c47911461045d57600080fd5b8063a9059cbb146103b2578063c0029bda146103c5578063cf42dca8146103d8578063d505accf146103eb57600080fd5b806390596dd1116100de57806390596dd11461036457806395d89b41146103775780639a156bd61461037f578063a457c2d71461039f57600080fd5b8063715018a6146103245780637ecebe001461032c5780638da5cb5b1461033f57600080fd5b8063395093511161017157806352fe30871161014b57806352fe3087146102cc5780635d7b0758146102e9578063631b5dfb146102fe57806370a082311461031157600080fd5b806339509351146102935780633c6292cd146102a65780634382b0f6146102b957600080fd5b80631d3b4dd6116101ad5780631d3b4dd61461022b57806323b872dd14610262578063313ce567146102755780633644e5151461028b57600080fd5b806306fdde03146101d4578063095ea7b3146101f257806318160ddd14610215575b600080fd5b6101dc610470565b6040516101e99190612e2b565b60405180910390f35b610205610200366004612bb8565b610502565b60405190151581526020016101e9565b61021d610518565b6040519081526020016101e9565b61023e610239366004612cef565b610531565b604080516001600160e01b03909316835263ffffffff9091166020830152016101e9565b610205610270366004612ab4565b61055f565b6101235460405160ff90911681526020016101e9565b61021d610610565b6102056102a1366004612bb8565b61061a565b61023e6102b4366004612bb8565b610656565b61021d6102c7366004612d08565b610692565b6102d4602081565b60405163ffffffff90911681526020016101e9565b6102fc6102f7366004612bb8565b6106a3565b005b6102fc61030c366004612ab4565b6106e4565b61021d61031f366004612a5e565b610781565b6102fc61078c565b61021d61033a366004612a5e565b6107f2565b60f0546001600160a01b03165b6040516001600160a01b0390911681526020016101e9565b6102fc610372366004612bb8565b610810565b6101dc61084d565b61039261038d366004612b63565b61085c565b6040516101e99190612d99565b6102056103ad366004612bb8565b61091a565b6102056103c0366004612bb8565b6109b3565b61021d6103d3366004612be4565b6109c0565b6103926103e6366004612c19565b6109cc565b6102fc6103f9366004612af5565b610a88565b61021d61040c366004612a7b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6102fc610445366004612c5b565b610bce565b6102fc610458366004612a5e565b610e70565b60cc5461034c906001600160a01b031681565b60606036805461047f906130a3565b80601f01602080910402602001604051908101604052809291908181526020018280546104ab906130a3565b80156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b5050505050905090565b600061050f338484610f3b565b50600192915050565b600061052c60ef546001600160f01b031690565b905090565b60cf816020811061054157600080fd5b01546001600160e01b0381169150600160e01b900463ffffffff1682565b600061056c84848461105f565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156105f65760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6106038533858403610f3b565b60019150505b9392505050565b600061052c611326565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909161050f918590610651908690612f77565b610f3b565b60cd602052816000526040600020816020811061067257600080fd5b01546001600160e01b0381169250600160e01b900463ffffffff16905082565b600061069d826113a1565b92915050565b60cc546001600160a01b0316336001600160a01b0316146106d65760405162461bcd60e51b81526004016105ed90612ed6565b6106e08282611426565b5050565b60cc546001600160a01b0316336001600160a01b0316146107175760405162461bcd60e51b81526004016105ed90612ed6565b816001600160a01b0316836001600160a01b031614610772576001600160a01b03828116600090815260346020908152604080832093871683529290529081205461076390839061306f565b9050610770838583610f3b565b505b61077c82826115fb565b505050565b600061069d8261183d565b60f0546001600160a01b031633146107e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ed565b6107f06000611861565b565b6001600160a01b03811660009081526099602052604081205461069d565b60cc546001600160a01b0316336001600160a01b0316146108435760405162461bcd60e51b81526004016105ed90612ed6565b6106e082826115fb565b60606037805461047f906130a3565b60608160008167ffffffffffffffff81111561087a5761087a613149565b6040519080825280602002602001820160405280156108a3578160200160208202803683370190505b50905060005b82811015610910576108e1878787848181106108c7576108c7613133565b90506020020160208101906108dc9190612d08565b6118b3565b8282815181106108f3576108f3613133565b602090810291909101015280610908816130d8565b9150506108a9565b5095945050505050565b3360009081526034602090815260408083206001600160a01b03861684529091528120548281101561099c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105ed565b6109a93385858403610f3b565b5060019392505050565b600061050f33848461105f565b600061060983836118b3565b60608160008167ffffffffffffffff8111156109ea576109ea613149565b604051908082528060200260200182016040528015610a13578160200160208202803683370190505b50905060005b82811015610a7f57610a50868683818110610a3657610a36613133565b9050602002016020810190610a4b9190612d08565b6113a1565b828281518110610a6257610a62613133565b602090810291909101015280610a77816130d8565b915050610a19565b50949350505050565b83421115610ad85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016105ed565b6000609a54888888610ae98c61193d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610b4482611965565b90506000610b54828787876119b3565b9050896001600160a01b0316816001600160a01b031614610bb75760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016105ed565b610bc28a8a8a610f3b565b50505050505050505050565b600054610100900460ff1680610be7575060005460ff16155b610c035760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015610c25576000805461ffff19166101011790555b610c9887878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611b5e92505050565b610ccc60405180604001604052806013815260200172141bdbdb151bd9d95d1a195c88151a58dad95d606a1b815250611bdd565b60008360ff1611610d1f5760405162461bcd60e51b815260206004820152601760248201527f5469636b65742f646563696d616c732d67742d7a65726f00000000000000000060448201526064016105ed565b610123805460ff191660ff8516179055610d37611c7d565b6001600160a01b038216610d985760405162461bcd60e51b815260206004820152602260248201527f5469636b65742f636f6e74726f6c6c65722d6e6f742d7a65726f2d6164647265604482015261737360f01b60648201526084016105ed565b610e1487878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250506101235460ff169150869050611cf8565b7f18bb14f696b97c9ff8d44ac723d7b0663bd32189c6e86b9f4cce10bceccbf489878787878787604051610e4d96959493929190612ddd565b60405180910390a18015610e67576000805461ff00191690555b50505050505050565b60f0546001600160a01b03163314610eca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ed565b6001600160a01b038116610f2f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ed565b610f3881611861565b50565b6001600160a01b038316610f9d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ed565b6001600160a01b038216610ffe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ed565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166110c35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ed565b6001600160a01b0382166111255760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ed565b80611131848483611e6a565b6001600160a01b038416600090815260ce60209081526040918290208251808401909352546001600160f01b03808216808552600160f01b90920461ffff169284019290925290831611156111d75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105ed565b6040518060400160405280838360000151036001600160f01b03168152602001611205878460200151611e75565b61ffff9081169091526001600160a01b03808816600090815260ce602090815260408083208651968301518616600160f01b9081026001600160f01b0398891617909155938a1683529182902082518084018452905495861681529290940490921692810192909252805180820190915281518190611285908690612f55565b6001600160f01b031681526020016112a1878460200151611e75565b61ffff9081169091526001600160a01b03878116600081815260ce6020908152604091829020865196820151909516600160f01b026001600160f01b039096169590951790935591518781529192908916917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050505050565b600061052c7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61135560655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60408051610400810190915260009061069d9060cf602084835b828210156114025760408051808201909152848301546001600160e01b0381168252600160e01b900463ffffffff16602080830191909152908252600190920191016113bb565b505050508361141960ef546001600160f01b031690565b611421611f16565b611f4f565b6001600160a01b03821661147c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105ed565b8061148960008483611e6a565b60408051808201825260ef546001600160f01b0381168252600160f01b900461ffff1660208201528151808301909252805190919081906114cb908590612f55565b6001600160f01b031681526020016114e683602001516120b4565b61ffff90811690915281516020928301518216600160f01b9081026001600160f01b039283161760ef556001600160a01b038816600090815260ce85526040908190208151808301835290549384168152919092049092169282019290925281518083019092528051909190819061155f908690612f55565b6001600160f01b0316815260200161157b878460200151611e75565b61ffff9081169091526001600160a01b038716600081815260ce60209081526040808320865196830151909516600160f01b026001600160f01b039096169590951790935592518781529092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050505050565b6001600160a01b03821661165b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105ed565b8061166883600083611e6a565b6001600160a01b038316600090815260ce60209081526040918290208251808401909352546001600160f01b03808216808552600160f01b90920461ffff1692840192909252908316111561170a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105ed565b6040518060400160405280838360000151036001600160f01b03168152602001611738868460200151611e75565b61ffff9081169091526001600160a01b038616600090815260ce60209081526040918290208451948201518416600160f01b9081026001600160f01b03968716179091558251808401845260ef5495861681529404909216918301919091528051808201909152815181906117ae90869061304f565b6001600160f01b031681526020016117c983602001516120b4565b61ffff908116909152815160209092015116600160f01b026001600160f01b039091161760ef556040516000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118309088815260200190565b60405180910390a36115f4565b6001600160a01b0316600090815260ce60205260409020546001600160f01b031690565b60f080546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600090815260cd60209081526040808320815161040081019092526106099284835b828210156119265760408051808201909152848301546001600160e01b0381168252600160e01b900463ffffffff16602080830191909152908252600190920191016118df565b50505050836119348661183d565b61142187612136565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b600061069d611972611326565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611a305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105ed565b8360ff16601b1480611a4557508360ff16601c145b611a9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105ed565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611af0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b535760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105ed565b90505b949350505050565b600054610100900460ff1680611b77575060005460ff16155b611b935760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015611bb5576000805461ffff19166101011790555b611bbd61216d565b611bc783836121d7565b801561077c576000805461ff0019169055505050565b600054610100900460ff1680611bf6575060005460ff16155b611c125760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015611c34576000805461ffff19166101011790555b611c3c61216d565b611c5f82604051806040016040528060018152602001603160f81b81525061226c565b611c68826122f6565b80156106e0576000805461ff00191690555050565b600054610100900460ff1680611c96575060005460ff16155b611cb25760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015611cd4576000805461ffff19166101011790555b611cdc61216d565b611ce4612386565b8015610f38576000805461ff001916905550565b600054610100900460ff1680611d11575060005460ff16155b611d2d5760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015611d4f576000805461ffff19166101011790555b6001600160a01b038216611db15760405162461bcd60e51b815260206004820152602360248201527f436f6e74726f6c6c6564546f6b656e2f636f6e74726f6c6c65722d6e6f742d7a60448201526265726f60e81b60648201526084016105ed565b611dbb8585611b5e565b611df96040518060400160405280601c81526020017f506f6f6c546f67657468657220436f6e74726f6c6c6564546f6b656e00000000815250611bdd565b60cc80546001600160a01b0319166001600160a01b0384161790556040517f41bc1176d7b9b7bc036f385a7e5b08b0662a7afa0844af8a599ad431150227e190611e4a908790879087908790612e3e565b60405180910390a180156115f4576000805461ff00191690555050505050565b61077c8383836123e6565b6001600160a01b038216600090815260cd6020526040812081908190611ea490611e9e8761183d565b86612450565b915091508361ffff168161ffff1614611b56576040805183516001600160e01b0316815260208085015163ffffffff16908201526001600160a01b038716917fdd3e7cd3a260a292b0b3306b2ca62f30a7349619a9d09c58109318774c6b627d910160405180910390a2949350505050565b60ef5460009061052c90600190611f3a90602090600160f01b900461ffff16612f8f565b611f449190613086565b63ffffffff16612585565b6000428163ffffffff80831690871611611f695785611f6b565b815b9050611f87604080518082019091526000808252602082015290565b6000888661ffff1660208110611f9f57611f9f613133565b60200201519050611fc58385836020015163ffffffff166125929092919063ffffffff16565b15611fd65786945050505050611b56565b88611fee611fe5886001612f0d565b61ffff16612585565b61ffff166020811061200257612002613133565b60200201519050806020015163ffffffff1660001415612020575087515b61203f8160200151858563ffffffff166126639092919063ffffffff16565b15612051576000945050505050611b56565b61205c89878a612730565b8151815191945091925060009161207291613027565b905060008260200151846020015161208a9190613086565b905061209c63ffffffff821683612fce565b6001600160e01b03169b9a5050505050505050505050565b60008060006120d060cf611e9e60ef546001600160f01b031690565b915091508361ffff168161ffff1614610609576040805183516001600160e01b0316815260208085015163ffffffff16908201527f3375b905d617084fa6b7531688cc8046feb1f1a0b8ba2273de03c59d8d84416c910160405180910390a19392505050565b6001600160a01b038116600090815260ce6020908152604082205461069d91600191611f3a9190600160f01b900461ffff16612f8f565b600054610100900460ff1680612186575060005460ff16155b6121a25760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff16158015611ce4576000805461ffff19166101011790558015610f38576000805461ff001916905550565b600054610100900460ff16806121f0575060005460ff16155b61220c5760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff1615801561222e576000805461ffff19166101011790555b8251612241906036906020860190612916565b508151612255906037906020850190612916565b50801561077c576000805461ff0019169055505050565b600054610100900460ff1680612285575060005460ff16155b6122a15760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff161580156122c3576000805461ffff19166101011790555b8251602080850191909120835191840191909120606591909155606655801561077c576000805461ff0019169055505050565b600054610100900460ff168061230f575060005460ff16155b61232b5760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff1615801561234d576000805461ffff19166101011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a5580156106e0576000805461ff00191690555050565b600054610100900460ff168061239f575060005460ff16155b6123bb5760405162461bcd60e51b81526004016105ed90612e88565b600054610100900460ff161580156123dd576000805461ffff19166101011790555b611ce433611861565b60cc54604051637cbab1c760e01b81526001600160a01b03858116600483015284811660248301526044820184905290911690637cbab1c790606401600060405180830381600087803b15801561243c57600080fd5b505af1158015610e67573d6000803e3d6000fd5b6040805180820190915260008082526020820152600042818661247d6001611f3a602061ffff8a16612f8f565b61ffff166020811061249157612491613133565b604080518082019091529101546001600160e01b038116825263ffffffff600160e01b909104811660208301819052919250831614156124d457925061257d9050565b60405180604001604052806125078360200151856124f29190613086565b6125029063ffffffff168a613008565b6128a9565b83516125139190612f33565b6001600160e01b031681526020018363ffffffff16815250935083878661ffff166020811061254457612544613133565b825160209093015163ffffffff16600160e01b026001600160e01b0390931692909217910155612578611fe5866001612f0d565b925050505b935093915050565b600061069d6020836130f3565b60008163ffffffff168463ffffffff16111580156125bc57508163ffffffff168363ffffffff1611155b156125d8578263ffffffff168463ffffffff1611159050610609565b60008263ffffffff168563ffffffff16116126075761260263ffffffff8616640100000000612fae565b61260f565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116126475761264263ffffffff8616640100000000612fae565b61264f565b8463ffffffff165b64ffffffffff169091111595945050505050565b60008163ffffffff168463ffffffff1610801561268b57508163ffffffff168363ffffffff16105b156126a6578263ffffffff168463ffffffff16109050610609565b60008263ffffffff168563ffffffff16116126d5576126d063ffffffff8616640100000000612fae565b6126dd565b8463ffffffff165b64ffffffffff16905060008363ffffffff168563ffffffff16116127155761271063ffffffff8616640100000000612fae565b61271d565b8463ffffffff165b64ffffffffff1690911095945050505050565b60408051808201909152600080825260208201526040805180820190915260008082526020820152426000612769611fe5876001612f0d565b61ffff1690506000600161277e602084612f77565b612788919061306f565b905060005b60026127998385612f77565b6127a39190612ff4565b9050886127af82612585565b61ffff16602081106127c3576127c3613133565b602002015195506000866020015190508063ffffffff16600014156127f5576127ed826001612f77565b93505061278d565b89612809612804846001612f77565b612585565b61ffff166020811061281d5761281d613133565b60200201519550600061283c63ffffffff808416908b90899061259216565b905080801561286557506128658760200151878b63ffffffff166126639092919063ffffffff16565b1561287157505061289d565b806128885761288160018461306f565b9350612896565b612893836001612f77565b94505b505061278d565b50505050935093915050565b60006001600160e01b038211156129125760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105ed565b5090565b828054612922906130a3565b90600052602060002090601f016020900481019282612944576000855561298a565b82601f1061295d57805160ff191683800117855561298a565b8280016001018555821561298a579182015b8281111561298a57825182559160200191906001019061296f565b506129129291505b808211156129125760008155600101612992565b60008083601f8401126129b857600080fd5b50813567ffffffffffffffff8111156129d057600080fd5b6020830191508360208260051b85010111156129eb57600080fd5b9250929050565b60008083601f840112612a0457600080fd5b50813567ffffffffffffffff811115612a1c57600080fd5b6020830191508360208285010111156129eb57600080fd5b803563ffffffff81168114612a4857600080fd5b919050565b803560ff81168114612a4857600080fd5b600060208284031215612a7057600080fd5b81356106098161315f565b60008060408385031215612a8e57600080fd5b8235612a998161315f565b91506020830135612aa98161315f565b809150509250929050565b600080600060608486031215612ac957600080fd5b8335612ad48161315f565b92506020840135612ae48161315f565b929592945050506040919091013590565b600080600080600080600060e0888a031215612b1057600080fd5b8735612b1b8161315f565b96506020880135612b2b8161315f565b95506040880135945060608801359350612b4760808901612a4d565b925060a0880135915060c0880135905092959891949750929550565b600080600060408486031215612b7857600080fd5b8335612b838161315f565b9250602084013567ffffffffffffffff811115612b9f57600080fd5b612bab868287016129a6565b9497909650939450505050565b60008060408385031215612bcb57600080fd5b8235612bd68161315f565b946020939093013593505050565b60008060408385031215612bf757600080fd5b8235612c028161315f565b9150612c1060208401612a34565b90509250929050565b60008060208385031215612c2c57600080fd5b823567ffffffffffffffff811115612c4357600080fd5b612c4f858286016129a6565b90969095509350505050565b60008060008060008060808789031215612c7457600080fd5b863567ffffffffffffffff80821115612c8c57600080fd5b612c988a838b016129f2565b90985096506020890135915080821115612cb157600080fd5b50612cbe89828a016129f2565b9095509350612cd1905060408801612a4d565b91506060870135612ce18161315f565b809150509295509295509295565b600060208284031215612d0157600080fd5b5035919050565b600060208284031215612d1a57600080fd5b61060982612a34565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845260005b81811015612d7257602081850181015186830182015201612d56565b81811115612d84576000602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b81811015612dd157835183529284019291840191600101612db5565b50909695505050505050565b608081526000612df160808301888a612d23565b8281036020840152612e04818789612d23565b60ff95909516604084015250506001600160a01b0391909116606090910152949350505050565b6020815260006106096020830184612d4c565b608081526000612e516080830187612d4c565b8281036020840152612e638187612d4c565b60ff95909516604084015250506001600160a01b039190911660609091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601f908201527f436f6e74726f6c6c6564546f6b656e2f6f6e6c792d636f6e74726f6c6c657200604082015260600190565b600061ffff808316818516808303821115612f2a57612f2a613107565b01949350505050565b60006001600160e01b03828116848216808303821115612f2a57612f2a613107565b60006001600160f01b03828116848216808303821115612f2a57612f2a613107565b60008219821115612f8a57612f8a613107565b500190565b600063ffffffff808316818516808303821115612f2a57612f2a613107565b600064ffffffffff808316818516808303821115612f2a57612f2a613107565b60006001600160e01b0383811680612fe857612fe861311d565b92169190910492915050565b6000826130035761300361311d565b500490565b600081600019048311821515161561302257613022613107565b500290565b60006001600160e01b038381169083168181101561304757613047613107565b039392505050565b60006001600160f01b038381169083168181101561304757613047613107565b60008282101561308157613081613107565b500390565b600063ffffffff8381169083168181101561304757613047613107565b600181811c908216806130b757607f821691505b6020821081141561195f57634e487b7160e01b600052602260045260246000fd5b60006000198214156130ec576130ec613107565b5060010190565b6000826131025761310261311d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f3857600080fdfea2646970667358221220ea6b43e9f75331c04c464d309a709f6341cefe424d7a398ec19d4bd0406bc21564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220abbd91ee612265d8eb6f13d4e5c7ce17d52cacb48aa519e845535f47a3946d8064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create()": {
        "returns": {
          "_0": "A reference to the new proxied Controlled ERC20 Token"
        }
      }
    },
    "title": "Controlled ERC20 Token Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the Factory with an instance of the Controlled ERC20 Token"
      },
      "create()": {
        "notice": "Creates a new Controlled ERC20 Token as a proxy of the template instance"
      },
      "instance()": {
        "notice": "Contract template for deploying proxied tokens"
      }
    },
    "notice": "Minimal proxy pattern for creating new Controlled ERC20 Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6249,
        "contract": "contracts/TicketProxyFactory.sol:TicketProxyFactory",
        "label": "instance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Ticket)6237"
      }
    ],
    "types": {
      "t_contract(Ticket)6237": {
        "encoding": "inplace",
        "label": "contract Ticket",
        "numberOfBytes": "20"
      }
    }
  }
}