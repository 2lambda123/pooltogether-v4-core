{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract ClaimableDrawHarness",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deployMinimal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instance",
      "outputs": [
        {
          "internalType": "contract ClaimableDrawHarness",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f39cfc291eec0a265ad57b0dc8063b49fbf28d7f8e51f3a6349e148203c1956",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1567391",
    "logsBloom": "0x
    "blockHash": "0x0866a1a05cb8514e6e473fd70d5d94813c3c3fd67b4671462f91217ec336a786",
    "transactionHash": "0x9f39cfc291eec0a265ad57b0dc8063b49fbf28d7f8e51f3a6349e148203c1956",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1567391",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b3f16b26ce5bbb86e7ef5bf9dd11ea21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract ClaimableDrawHarness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instance\",\"outputs\":[{\"internalType\":\"contract ClaimableDrawHarness\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Creates a minimal proxy to the ClaimableDrawHarness.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/ClaimableDrawHarnessProxyFactory.sol\":\"ClaimableDrawHarnessProxyFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"contracts/ClaimableDraw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IDrawCalculator.sol\\\";\\n\\ncontract ClaimableDraw is OwnableUpgradeable {\\n\\n  /**\\n    * @notice The current draw id. \\n    * @dev    The current draw id which correlates to index position in the draws array.\\n  */\\n  uint256 public currentDrawId;\\n\\n  /**\\n    * @notice Current draw index for managing the draws ring buffer.\\n  */\\n  uint256 public currentDrawIndex;\\n\\n  /**\\n    * @notice External account/contract authorized to create new draws.\\n    * @dev    ClaimableDrawPrizeStrategy authorized to create a new draw when capturing the award balance.\\n  */\\n  address public drawManager;\\n\\n  /**\\n    * @notice A historical list of all draws. The index position is used as the Draw ID.\\n  */\\n  Draw[] internal draws;\\n\\n  // Mapping of user claimed draws\\n  // +---------+-------------+\\n  // | Address | Bytes32     |\\n  // +---------+-------------+\\n  // | user    | drawHistory |\\n  // | user    | drawHistory |\\n  // +---------+-------------+\\n  mapping(address => bytes32) internal claimedDraws;\\n\\n  /**\\n    * @notice Draw model used to calculate a user's claim payout.\\n  */\\n  IDrawCalculator public currentCalculator;\\n\\n  /* ============ Structs ============ */\\n\\n  struct Draw {\\n    uint256 randomNumber;\\n    uint256 prize;\\n    uint32 timestamp;\\n    IDrawCalculator calculator;\\n  }\\n\\n  /* ============ Events ============ */\\n\\n  /**\\n    * @notice Emit when a user has claimed N of draw prizes.\\n    * @param user             Address of user receiving draw(s) total award payout\\n    * @param userClaimedDraws User's updated claim history after executing succesful draw claims\\n    * @param totalPayout      Total award payout calculated using total draw ids and pick indices\\n  */\\n  event ClaimedDraw (\\n    address indexed user,\\n    bytes32 userClaimedDraws,\\n    uint256 totalPayout\\n  );\\n\\n  /**\\n    * @notice Emit when a new draw calculator is set.\\n    * @param calculator Address of the new calculator used to calculate award payout\\n  */\\n  event DrawCalculatorSet (\\n    IDrawCalculator indexed calculator\\n  );\\n\\n  /**\\n    * @notice Emit when a new draw has been generated.\\n    * @param drawManager Address of the ClaimableDrawPrizeStrategy authorized to create a new draw\\n  */\\n  event DrawManagerSet (\\n    address indexed drawManager\\n  );\\n\\n  /**\\n    * @notice Emit when a new draw has been created.\\n    * @param randomNumber Randomly generated number used to calculate draw winning numbers\\n    * @param timestamp    Epoch timestamp when the draw is created.\\n    * @param prize        Award amount captured when draw is created.\\n    * @param calculator   Address of the DrawCalculator used to calculate award payout\\n  */\\n  event DrawSet (\\n    uint256 currentDrawIndex,\\n    uint256 randomNumber,\\n    uint256 timestamp,\\n    uint256 prize,\\n    IDrawCalculator indexed calculator\\n  );\\n\\n  /* ============ Modifiers ============ */\\n\\n  /**\\n    * @notice Authorizate caller to create new draw.\\n    * @dev    Authorizes the calling ClaimableDrawPrizeStrategy to create a new draw during the capture award stage.\\n  */\\n  modifier onlyDrawManager() {\\n    require(msg.sender == drawManager, \\\"ClaimableDraw/unauthorized-draw-manager\\\");\\n    _;\\n  }\\n\\n  /* ============ Initialize ============ */\\n\\n  /**\\n    * @notice Initialize claimable draw smart contract.\\n    *\\n    * @param _drawManager  Address of draw manager\\n    * @param _calculator  Address of draw calculator\\n  */\\n  function initialize (\\n    address _drawManager,\\n    IDrawCalculator _calculator\\n  ) external initializer {\\n    __Ownable_init();\\n\\n    _setDrawManager(_drawManager);\\n    _setDrawCalculator(_calculator);\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /**\\n    * @notice Allows users to check the claimable status for a target draw. \\n    * @dev    Checks a claimable status for target draw by reading from a user's claim history in claimedDraws.\\n    *\\n    * @param user   Address of user\\n    * @param drawId Unique draw id (index)\\n  */\\n  function hasClaimed(address user, uint256 drawId) external view returns (bool) {\\n    return _readUsersDrawClaimStatusFromClaimedHistory(claimedDraws[user], _drawIdToClaimIndex(drawId, currentDrawId));\\n  }\\n\\n  /**\\n    * @notice Reads a user draw claim history.\\n    * @dev    Reads a user draw claim history, which is stored in a packed bytes32 \\\"word\\\"\\n    * @param user Address of user\\n  */\\n  function userClaimedDraws(address user) external view returns(bytes32) {\\n    return claimedDraws[user];\\n  }\\n\\n  /**\\n    * @notice Reads a Draw using the draw id\\n    * @dev    Reads a Draw using the draw id which equal the index position in the draws array. \\n    * @param drawId Address of user\\n    * @return Draw struct\\n  */\\n  function getDraw(uint256 drawId) external view returns(Draw memory) {\\n    require(drawId <= currentDrawId, \\\"ClaimableDraw/draw-nonexistent\\\");\\n    return draws[drawId];\\n  }\\n\\n  /**\\n    * @notice External function to set a new authorized draw manager.\\n    * @dev    External function to set the ClaimableDrawPrizeStrategy, which should be called when a new prize strategy is deployed.\\n    * @param _newDrawManager  New draw manager address\\n    * @return New draw manager address\\n  */\\n  function setDrawManager(address _newDrawManager) external onlyOwner returns(address) {\\n    return _setDrawManager(_newDrawManager);\\n  }\\n\\n  /**\\n    * @notice External function to set a new draw calculator.\\n    * @dev    External function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\\n    * @param _newCalculator  New draw calculator address\\n    * @return New calculator address\\n  */\\n  function setDrawCalculator(IDrawCalculator _newCalculator) external onlyOwner returns(IDrawCalculator) {\\n    return _setDrawCalculator(_newCalculator);\\n  }\\n\\n  /**\\n    * @notice Creates a new draw via a request from the draw manager.\\n    *\\n    * @param _randomNumber  Randomly generated draw number\\n    * @param _timestamp     Epoch timestamp of the draw\\n    * @param _prize         Award captured when creating a new draw \\n    * @return New draw id\\n  */\\n  function createDraw(uint256 _randomNumber, uint32 _timestamp, uint256 _prize) public onlyDrawManager returns (uint256) {\\n    return _createDraw(_randomNumber, _timestamp, _prize);\\n  }\\n\\n  /**\\n    * @notice External function to claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \\n    *\\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\\n    * @param _drawIds          Index of the draw in the draws array\\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\\n    * @return Total claim payout\\n  */\\n  function claim(address _user, uint256[][] calldata _drawIds, IDrawCalculator[] calldata _drawCalculators, bytes[] calldata _data) external returns (uint256) {\\n    return _claim(_user, _drawIds, _drawCalculators, _data);\\n  }\\n\\n  /* ============ Internal Functions ============ */\\n\\n  /**\\n    * @notice Internal function to set a new authorized draw manager.\\n    * @dev    Internal function to set the ClaimableDrawPrizeStrategy, which should be called when a new prize strategy is deployed.\\n    * @param _newDrawManager  New draw manager address\\n    * @return  New draw manager address\\n  */\\n  function _setDrawManager(address _newDrawManager) internal returns(address) {\\n    require(_newDrawManager != address(0), \\\"ClaimableDraw/draw-manager-not-zero-address\\\");\\n    require(_newDrawManager != address(drawManager), \\\"ClaimableDraw/existing-draw-manager-address\\\");\\n\\n    emit DrawManagerSet(_newDrawManager);\\n    \\n    drawManager = _newDrawManager;\\n\\n    return _newDrawManager;\\n  }\\n\\n  /**\\n    * @notice Internal function to set a new draw calculator.\\n    * @dev    Internal function to sets a new draw calculator, which is then sequentially stored in new draw structs. Enabling unique prize calculators for individual draws.\\n    * @param _newCalculator  New draw calculator address\\n    * @return New calculator address\\n  */\\n  function _setDrawCalculator(IDrawCalculator _newCalculator) internal returns(IDrawCalculator) {\\n    require(address(_newCalculator) != address(0), \\\"ClaimableDraw/calculator-not-zero-address\\\");\\n    require(_newCalculator != currentCalculator, \\\"ClaimableDraw/existing-calculator-address\\\");\\n\\n    emit DrawCalculatorSet(_newCalculator);\\n    \\n    currentCalculator = _newCalculator;\\n\\n    return _newCalculator;\\n  }\\n\\n  /**\\n    * @notice Claim a user's award by passing in the calculated drawIds, drawCalculators and pickIndices. \\n    * @dev Calculates a user's total award by calling an external drawCalculator with winning drawIds and pickIndices. \\n    *\\n    * @param _user             Address of user to claim awards for. Does NOT need to be msg.sender\\n    * @param _drawIds          Index of the draw in the draws array\\n    * @param _drawCalculators  Address of the draw calculator for a set of draw ids\\n    * @param _data             The draw pick indices (uint256[][]) passed as a formatted bytes correlating to the draw ids\\n    * @return Total claim payout\\n  */\\n  function _claim(\\n    address _user, \\n    uint256[][] calldata _drawIds, \\n    IDrawCalculator[] calldata _drawCalculators, \\n    bytes[] calldata _data\\n  ) internal returns (uint256) {\\n    uint256 drawCalculatorsLength = _drawCalculators.length;\\n    require(drawCalculatorsLength == _drawIds.length, \\\"ClaimableDraw/invalid-calculator-array\\\");\\n    bytes32 userDrawClaimHistory = claimedDraws[_user]; //sload\\n    uint256 _currentDrawId = currentDrawId; // sload\\n    uint256 payout;\\n    uint256 totalPayout;\\n\\n    for (uint256 calcIndex = 0; calcIndex < drawCalculatorsLength; calcIndex++) {\\n      IDrawCalculator _drawCalculator = _drawCalculators[calcIndex];\\n      (payout, userDrawClaimHistory) = _calculateAllDraws(_user, _drawIds[calcIndex], _drawCalculator, _data[calcIndex], _currentDrawId, userDrawClaimHistory);\\n      totalPayout += payout;\\n    }\\n\\n    claimedDraws[_user] = userDrawClaimHistory; //sstore\\n    emit ClaimedDraw(_user, userDrawClaimHistory, totalPayout);\\n\\n    return totalPayout;\\n  }\\n\\n  /**\\n    * @dev Calculates user payout for a list of draws linked to single draw calculator.\\n    * @param _user            Address of user\\n    * @param _drawIds         Array of draws for target draw calculator\\n    * @param _drawCalculator  Address of draw calculator to determine award payout\\n    * @param _data            Pick indices for target draw\\n    * @param _currentDrawId   ID of draw being calculated\\n    * @param _claimedDraws    User's claimed draw history\\n    * @return totalPayout Total claim payout\\n    * @return userDrawClaimHistory Updated userDrawClaimHistory\\n  */\\n  function _calculateAllDraws(\\n    address _user, \\n    uint256[] calldata _drawIds, \\n    IDrawCalculator _drawCalculator, \\n    bytes calldata _data, \\n    uint256 _currentDrawId, \\n    bytes32 _claimedDraws\\n  ) internal returns (uint256 totalPayout, bytes32 userDrawClaimHistory) {\\n    uint256[] memory prizes = new uint256[](_drawIds.length);\\n    uint32[] memory timestamps = new uint32[](_drawIds.length);\\n    uint256[] memory randomNumbers = new uint256[](_drawIds.length);\\n    userDrawClaimHistory = _claimedDraws;\\n\\n    for (uint256 drawIndex = 0; drawIndex < _drawIds.length; drawIndex++) {\\n      Draw memory _draw = draws[_drawIds[drawIndex]];\\n      require(_draw.calculator == _drawCalculator, \\\"ClaimableDraw/calculator-address-invalid\\\");\\n      prizes[drawIndex] = _draw.prize;\\n      timestamps[drawIndex] = uint32(_draw.timestamp);\\n      randomNumbers[drawIndex] = _draw.randomNumber;\\n      userDrawClaimHistory = _updateUsersDrawClaimStatus(userDrawClaimHistory, _drawIds[drawIndex], _currentDrawId);\\n    }\\n\\n    totalPayout += _drawCalculator.calculate(_user, randomNumbers, timestamps, prizes, _data);\\n  }\\n\\n  /**\\n    * @notice Create a new claimable draw.\\n    * @dev Create a new claimable draw, updates currentDrawId and adds the draw to the draws array.\\n    * @param _randomNumber  Randomly generated draw number\\n    * @param _timestamp     Epoch timestamp of the draw\\n    * @param _prize         Draw's captured award (i.e. prize) amount\\n    * @return New draw id\\n  */\\n  function _createDraw(uint256 _randomNumber, uint32 _timestamp, uint256 _prize) internal returns (uint256) {\\n    uint256 drawsLength =  draws.length;\\n    IDrawCalculator _currentCalculator = currentCalculator;\\n    Draw memory _draw = Draw({randomNumber: _randomNumber, prize: _prize, timestamp: _timestamp, calculator: _currentCalculator});\\n    currentDrawId = drawsLength;\\n    draws.push(_draw);\\n    emit DrawSet(drawsLength, _randomNumber, _timestamp, _prize, _currentCalculator);\\n    \\n    return drawsLength;\\n  } \\n\\n  /**\\n    * @notice Update the draw claim history for target draw id.\\n    * @dev Update the draw claim history for target draw id.\\n    * @param _userDrawClaimHistory  Current user claimed draws\\n    * @param _drawId                ID of draw to update \\n    * @param _currentDrawId         Current draw id (i.e. last draw id)\\n    * @return Updated userDrawClaimHistory\\n  */\\n  function _updateUsersDrawClaimStatus(bytes32 _userDrawClaimHistory, uint256 _drawId, uint256 _currentDrawId) internal pure returns (bytes32) {\\n    uint8 drawIndex = _drawIdToClaimIndex(_drawId, _currentDrawId);\\n    bool isClaimed = _readUsersDrawClaimStatusFromClaimedHistory(_userDrawClaimHistory, drawIndex);\\n    require(!isClaimed, \\\"ClaimableDraw/user-previously-claimed\\\");\\n\\n    return _writeUsersDrawClaimStatusFromClaimedHistory(_userDrawClaimHistory, drawIndex);\\n  }\\n\\n  /**\\n    * @notice Calculates the claim index using the draw id.\\n    * @dev Calculates the claim index, while accounting for a draws expiration status. \\n    * @param drawId          Draw id used for calculation\\n    * @param _currentDrawId  The current draw id\\n    * @return Absolute draw index in draws ring buffer\\n  */\\n  function _drawIdToClaimIndex(uint256 drawId, uint256 _currentDrawId) internal pure returns (uint8) { \\n    require(drawId + 256 > _currentDrawId, \\\"ClaimableDraw/claim-expired\\\");\\n    require(drawId <= _currentDrawId, \\\"ClaimableDraw/drawid-out-of-bounds\\\");\\n\\n    // How many indices in the past the given draw is\\n    uint256 deltaIndex = _currentDrawId - drawId;\\n\\n    // Find absolute draw index by using currentDraw index and delta\\n    return uint8(_currentDrawId - deltaIndex);\\n  }\\n\\n\\n   /**\\n    * @dev Read the last user claimed status of a target draw.\\n    *\\n    * @param _userClaimedDraws  User claim draw history (256 bit word)\\n    * @param _drawIndex         The index within that word (0 to 7)\\n    * @return User's draw claim status\\n  */\\n  function _readUsersDrawClaimStatusFromClaimedHistory(bytes32 _userClaimedDraws, uint8 _drawIndex) internal pure returns (bool) {\\n    uint256 mask = (uint256(1)) << (_drawIndex);\\n    return ((uint256(_userClaimedDraws) & mask) >> (_drawIndex)) != 0;    \\n  }\\n\\n  /**\\n    * @dev Updates a 256 bit word with a 32 bit representation of a block number at a particular index\\n    *\\n    * @param _userClaimedDraws  User claim draw history (256 bit word)\\n    * @param _drawIndex         The index within that word (0 to 7)\\n    * @return Updated User's draw claim history\\n  */\\n  function _writeUsersDrawClaimStatusFromClaimedHistory(bytes32 _userClaimedDraws, uint8 _drawIndex) internal pure returns (bytes32) { \\n    uint256 mask =  (uint256(1)) << (_drawIndex);\\n    return bytes32(uint256(_userClaimedDraws) | mask); \\n  }\\n\\n}\",\"keccak256\":\"0x91ae2448fd5a90f7901d35949949f783de5b6f4d5fca525a415584faf5449cac\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x15fd8b3462494eeb25ec3351cc29fd5594d16df6c01d12b90493dd9bb82b7423\"},\"contracts/interfaces/IDrawCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IDrawCalculator {\\n  function calculate(address user, uint256[] calldata randomNumbers, uint32[] calldata timestamps, uint256[] calldata prizes, bytes calldata data) external returns (uint256);\\n  \\n}\",\"keccak256\":\"0x6bae8e4f6cd12a3828364babb481a5ff51e287ff23bca2190199c59bcc0ee09b\",\"license\":\"MIT\"},\"contracts/test/ClaimableDrawHarness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../ClaimableDraw.sol\\\";\\nimport \\\"../interfaces/IDrawCalculator.sol\\\";\\n\\ncontract ClaimableDrawHarness is ClaimableDraw {\\n  \\n  function createNewDraw(uint256 randomNumber, uint32 timestamp, uint256 prize) external returns (uint256) {\\n    return _createDraw(randomNumber, timestamp, prize);\\n  } \\n\\n  function readLastClaimFromClaimedHistory(bytes32 _userClaimedDraws, uint8 _drawIndex) external pure returns (bool) {\\n    return _readUsersDrawClaimStatusFromClaimedHistory(_userClaimedDraws, _drawIndex);\\n  }\\n\\n  function writeLastClaimFromClaimedHistory(bytes32 _userClaimedDraws, uint8 _drawIndex) external pure returns (bytes32) {\\n    return _writeUsersDrawClaimStatusFromClaimedHistory(_userClaimedDraws, _drawIndex);\\n  }\\n}\\n\",\"keccak256\":\"0x744da95d2a46016bd52dbc5b7f661783061873fa8393d9d04329aa7a486516b1\",\"license\":\"MIT\"},\"contracts/test/ClaimableDrawHarnessProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./ClaimableDrawHarness.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Creates a minimal proxy to the ClaimableDrawHarness.\\ncontract ClaimableDrawHarnessProxyFactory is ProxyFactory {\\n\\n  ClaimableDrawHarness public instance;\\n\\n  constructor () {\\n    instance = new ClaimableDrawHarness();\\n  }\\n\\n  function create() external returns (ClaimableDrawHarness) {\\n    return ClaimableDrawHarness(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n\\n}\",\"keccak256\":\"0x575beb8e25ff60a6c97552a8e8ebbc4eacef308d8b0ed9090a40f6d5b5d51206\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b61171b806103e283390190565b6103678061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206610a770b3c84fffecf3a18bf2e7d01fdfd9e61be2b7fe60d2cacb65512e0f5964736f6c63430008060033608060405234801561001057600080fd5b506116fb806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063740b9ba8116100a2578063bca78fab11610071578063bca78fab14610238578063be6307c814610241578063d325600a14610296578063d777490f146102bf578063f2fde38b146102d257600080fd5b8063740b9ba8146101f85780638da5cb5b14610201578063948231fb14610212578063b29310961461022557600080fd5b8063485cc955116100e9578063485cc955146101a25780634e0dd782146101b7578063590bdc87146101ca5780636b6ff1fc146101dd578063715018a6146101f057600080fd5b80631064b00c1461011b5780631ffed7fe146101415780633c5ebb1714610164578063454a814014610177575b600080fd5b61012e6101293660046113ec565b6102e5565b6040519081526020015b60405180910390f35b61015461014f36600461138f565b6102fa565b6040519015158152602001610138565b61012e61017236600461138f565b610313565b61018a610185366004611260565b610323565b6040516001600160a01b039091168152602001610138565b6101b56101b036600461132a565b610368565b005b61018a6101c5366004611260565b6103f2565b61012e6101d836600461127d565b610428565b61012e6101eb3660046113ec565b610445565b6101b56104bd565b61012e60665481565b6033546001600160a01b031661018a565b60675461018a906001600160a01b031681565b610154610233366004611363565b6104f3565b61012e60655481565b61025461024f3660046113ba565b610534565b6040516101389190815181526020808301519082015260408083015163ffffffff16908201526060918201516001600160a01b03169181019190915260800190565b61012e6102a4366004611260565b6001600160a01b031660009081526069602052604090205490565b606a5461018a906001600160a01b031681565b6101b56102e0366004611260565b61061c565b60006102f28484846106b7565b949350505050565b6000600160ff831690811b8416901c15155b9392505050565b6000600160ff83161b831761030c565b6033546000906001600160a01b031633146103595760405162461bcd60e51b81526004016103509061155e565b60405180910390fd5b6103628261080a565b92915050565b600054610100900460ff1680610381575060005460ff16155b61039d5760405162461bcd60e51b815260040161035090611510565b600054610100900460ff161580156103bf576000805461ffff19166101011790555b6103c7610937565b6103d0836109b2565b506103da8261080a565b5080156103ed576000805461ff00191690555b505050565b6033546000906001600160a01b0316331461041f5760405162461bcd60e51b81526004016103509061155e565b610362826109b2565b600061043988888888888888610ae3565b98975050505050505050565b6067546000906001600160a01b031633146104b25760405162461bcd60e51b815260206004820152602760248201527f436c61696d61626c65447261772f756e617574686f72697a65642d647261772d60448201526636b0b730b3b2b960c91b6064820152608401610350565b6102f28484846106b7565b6033546001600160a01b031633146104e75760405162461bcd60e51b81526004016103509061155e565b6104f16000610c76565b565b6001600160a01b03821660009081526069602052604081205460655461030c919061051f908590610cc8565b600160ff821690811b8316901c151592915050565b6040805160808101825260008082526020820181905291810182905260608101919091526065548211156105aa5760405162461bcd60e51b815260206004820152601e60248201527f436c61696d61626c65447261772f647261772d6e6f6e6578697374656e7400006044820152606401610350565b606882815481106105bd576105bd611684565b6000918252602091829020604080516080810182526003939093029091018054835260018101549383019390935260029092015463ffffffff8116928201929092526401000000009091046001600160a01b0316606082015292915050565b6033546001600160a01b031633146106465760405162461bcd60e51b81526004016103509061155e565b6001600160a01b0381166106ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610350565b6106b481610c76565b50565b60688054606a54604080516080810182528781526020810186815263ffffffff8089168385019081526001600160a01b03958616606085018181526065899055600189018a556000998a52855160038a027fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775381019190915594517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775486015591517fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775590940180549251909716640100000000026001600160c01b0319909216939092169290921791909117909355905182907f279acf4aeaf471514e051120ce391290eed9730595078b42ff2149330728b25b906107f79086908b908b908b90938452602084019290925263ffffffff166040830152606082015260800190565b60405180910390a2509095945050505050565b60006001600160a01b0382166108745760405162461bcd60e51b815260206004820152602960248201527f436c61696d61626c65447261772f63616c63756c61746f722d6e6f742d7a65726044820152686f2d6164647265737360b81b6064820152608401610350565b606a546001600160a01b03838116911614156108e45760405162461bcd60e51b815260206004820152602960248201527f436c61696d61626c65447261772f6578697374696e672d63616c63756c61746f604482015268722d6164647265737360b81b6064820152608401610350565b6040516001600160a01b038316907fff37eafdc3779d387d79dcf458fdc36536d857426f03a53204694f8fbb0d8a6b90600090a250606a80546001600160a01b0319166001600160a01b03831617905590565b600054610100900460ff1680610950575060005460ff16155b61096c5760405162461bcd60e51b815260040161035090611510565b600054610100900460ff1615801561098e576000805461ffff19166101011790555b610996610d97565b61099e610e01565b80156106b4576000805461ff001916905550565b60006001600160a01b038216610a1e5760405162461bcd60e51b815260206004820152602b60248201527f436c61696d61626c65447261772f647261772d6d616e616765722d6e6f742d7a60448201526a65726f2d6164647265737360a81b6064820152608401610350565b6067546001600160a01b0383811691161415610a905760405162461bcd60e51b815260206004820152602b60248201527f436c61696d61626c65447261772f6578697374696e672d647261772d6d616e6160448201526a6765722d6164647265737360a81b6064820152608401610350565b6040516001600160a01b038316907fadb835162e833908ef9512fb62f105358bf1ce29f80144a2f72ce244b79a68c690600090a250606780546001600160a01b0319166001600160a01b03831617905590565b600083868114610b445760405162461bcd60e51b815260206004820152602660248201527f436c61696d61626c65447261772f696e76616c69642d63616c63756c61746f726044820152652d617272617960d01b6064820152608401610350565b6001600160a01b038916600090815260696020526040812054606554909180805b85811015610c105760008b8b83818110610b8157610b81611684565b9050602002016020810190610b969190611260565b9050610bec8f8f8f85818110610bae57610bae611684565b9050602002810190610bc09190611593565b848e8e88818110610bd357610bd3611684565b9050602002810190610be591906115dd565b8b8d610e61565b96509350610bfa8484611624565b9250508080610c0890611653565b915050610b65565b506001600160a01b038d1660008181526069602090815260409182902087905581518781529081018490527ff1d701d4ac9590bd9c9edbf7c4cbc6119c65d572b9b3bb93f90a353b62d73436910160405180910390a29c9b505050505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081610cd784610100611624565b11610d245760405162461bcd60e51b815260206004820152601b60248201527f436c61696d61626c65447261772f636c61696d2d6578706972656400000000006044820152606401610350565b81831115610d7f5760405162461bcd60e51b815260206004820152602260248201527f436c61696d61626c65447261772f6472617769642d6f75742d6f662d626f756e604482015261647360f01b6064820152608401610350565b6000610d8b848461163c565b90506102f2818461163c565b600054610100900460ff1680610db0575060005460ff16155b610dcc5760405162461bcd60e51b815260040161035090611510565b600054610100900460ff1615801561099e576000805461ffff191661010117905580156106b4576000805461ff001916905550565b600054610100900460ff1680610e1a575060005460ff16155b610e365760405162461bcd60e51b815260040161035090611510565b600054610100900460ff16158015610e58576000805461ffff19166101011790555b61099e33610c76565b600080808867ffffffffffffffff811115610e7e57610e7e61169a565b604051908082528060200260200182016040528015610ea7578160200160208202803683370190505b50905060008967ffffffffffffffff811115610ec557610ec561169a565b604051908082528060200260200182016040528015610eee578160200160208202803683370190505b50905060008a67ffffffffffffffff811115610f0c57610f0c61169a565b604051908082528060200260200182016040528015610f35578160200160208202803683370190505b50905085935060005b8b8110156110e257600060688e8e84818110610f5c57610f5c611684565b9050602002013581548110610f7357610f73611684565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff8116928201929092526001600160a01b03640100000000909204821660608201819052909250908d16146110325760405162461bcd60e51b815260206004820152602860248201527f436c61696d61626c65447261772f63616c63756c61746f722d616464726573736044820152670b5a5b9d985b1a5960c21b6064820152608401610350565b806020015185838151811061104957611049611684565b602002602001018181525050806040015184838151811061106c5761106c611684565b602002602001019063ffffffff16908163ffffffff1681525050806000015183838151811061109d5761109d611684565b6020026020010181815250506110cc868f8f858181106110bf576110bf611684565b905060200201358b611187565b95505080806110da90611653565b915050610f3e565b50896001600160a01b03166358fe1abe8e8385878e8e6040518763ffffffff1660e01b815260040161111996959493929190611468565b602060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b91906113d3565b6111759086611624565b94505050509850989650505050505050565b6000806111948484610cc8565b9050600160ff821690811b8616901c158015906112015760405162461bcd60e51b815260206004820152602560248201527f436c61696d61626c65447261772f757365722d70726576696f75736c792d636c604482015264185a5b595960da1b6064820152608401610350565b600160ff83161b86179695505050505050565b60008083601f84011261122657600080fd5b50813567ffffffffffffffff81111561123e57600080fd5b6020830191508360208260051b850101111561125957600080fd5b9250929050565b60006020828403121561127257600080fd5b813561030c816116b0565b60008060008060008060006080888a03121561129857600080fd5b87356112a3816116b0565b9650602088013567ffffffffffffffff808211156112c057600080fd5b6112cc8b838c01611214565b909850965060408a01359150808211156112e557600080fd5b6112f18b838c01611214565b909650945060608a013591508082111561130a57600080fd5b506113178a828b01611214565b989b979a50959850939692959293505050565b6000806040838503121561133d57600080fd5b8235611348816116b0565b91506020830135611358816116b0565b809150509250929050565b6000806040838503121561137657600080fd5b8235611381816116b0565b946020939093013593505050565b600080604083850312156113a257600080fd5b82359150602083013560ff8116811461135857600080fd5b6000602082840312156113cc57600080fd5b5035919050565b6000602082840312156113e557600080fd5b5051919050565b60008060006060848603121561140157600080fd5b83359250602084013563ffffffff8116811461141c57600080fd5b929592945050506040919091013590565b600081518084526020808501945080840160005b8381101561145d57815187529582019590820190600101611441565b509495945050505050565b6001600160a01b038716815260a0602080830182905260009161148d9084018961142d565b838103604085015287518082528289019183019060005b818110156114c657835163ffffffff16835292840192918401916001016114a4565b505084810360608601526114da818961142d565b91505083810360808501528481528486838301376000818601830152601f909401601f1916909301909201979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e198436030181126115aa57600080fd5b83018035915067ffffffffffffffff8211156115c557600080fd5b6020019150600581901b360382131561125957600080fd5b6000808335601e198436030181126115f457600080fd5b83018035915067ffffffffffffffff82111561160f57600080fd5b60200191503681900382131561125957600080fd5b600082198211156116375761163761166e565b500190565b60008282101561164e5761164e61166e565b500390565b60006000198214156116675761166761166e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106b457600080fdfea264697066735822122067527e655daf8a3d3902de159c3c145e5b85091b4a88c6217035e7a0698bebb164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec09514610046578063b3eeb5e214610075578063efc81a8c14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610210565b610090565b6100596101e6565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f06040516001600160a01b03821681529093507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349915060200160405180910390a18251156101df576000826001600160a01b03168460405161013a91906102e0565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b50509050806101dd5760405162461bcd60e51b8152602060048201526024808201527f50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d66616044820152631a5b195960e21b606482015260840160405180910390fd5b505b5092915050565b60008054604080516020810190915282815261020b916001600160a01b031690610090565b905090565b6000806040838503121561022357600080fd5b82356001600160a01b038116811461023a57600080fd5b9150602083013567ffffffffffffffff8082111561025757600080fd5b818501915085601f83011261026b57600080fd5b81358181111561027d5761027d61031b565b604051601f8201601f19908116603f011681019083821181831017156102a5576102a561031b565b816040528281528860208487010111156102be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000825160005b8181101561030157602081860181015185830152016102e7565b81811115610310576000828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206610a770b3c84fffecf3a18bf2e7d01fdfd9e61be2b7fe60d2cacb65512e0f5964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Creates a minimal proxy to the ClaimableDrawHarness.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16121,
        "contract": "contracts/test/ClaimableDrawHarnessProxyFactory.sol:ClaimableDrawHarnessProxyFactory",
        "label": "instance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ClaimableDrawHarness)16111"
      }
    ],
    "types": {
      "t_contract(ClaimableDrawHarness)16111": {
        "encoding": "inplace",
        "label": "contract ClaimableDrawHarness",
        "numberOfBytes": "20"
      }
    }
  }
}